// Code generated by xsdgen. DO NOT EDIT.

package schema

import (
	"encoding/hex"
	"encoding/xml"
)

// The EndDevice providing the resources available within the DeviceCapabilities.
type AbstractDevice struct {
	XMLName                      xml.Name                     `xml:"http://ieee.org/2030.5 AbstractDevice"`
	ConfigurationLink            ConfigurationLink            `xml:"ConfigurationLink,omitempty"`
	DERListLink                  DERListLink                  `xml:"DERListLink,omitempty"`
	DeviceInformationLink        DeviceInformationLink        `xml:"DeviceInformationLink,omitempty"`
	DeviceStatusLink             DeviceStatusLink             `xml:"DeviceStatusLink,omitempty"`
	FileStatusLink               FileStatusLink               `xml:"FileStatusLink,omitempty"`
	IPInterfaceListLink          IPInterfaceListLink          `xml:"IPInterfaceListLink,omitempty"`
	LFDI                         HexBinary160                 `xml:"lFDI,omitempty"`
	LoadShedAvailabilityListLink LoadShedAvailabilityListLink `xml:"LoadShedAvailabilityListLink,omitempty"`
	LoadShedDeviceCategory       HexBinary32                  `xml:"loadShedDeviceCategory,omitempty"`
	LogEventListLink             LogEventListLink             `xml:"LogEventListLink,omitempty"`
	PowerStatusLink              PowerStatusLink              `xml:"PowerStatusLink,omitempty"`
	SFDI                         uint64                       `xml:"sFDI"`
	Subscribable                 byte                         `xml:"subscribable,attr,omitempty"`
	Href                         string                       `xml:"href,attr,omitempty"`
}

func (t *AbstractDevice) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AbstractDevice
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// AccountBalance contains the regular credit and emergency credit balance for this given service or commodity prepay instance. It may also contain status information concerning the balance data.
type AccountBalance struct {
	XMLName               xml.Name       `xml:"http://ieee.org/2030.5 AccountBalance"`
	AvailableCredit       AccountingUnit `xml:"availableCredit"`
	CreditStatus          byte           `xml:"creditStatus,omitempty"`
	EmergencyCredit       AccountingUnit `xml:"emergencyCredit,omitempty"`
	EmergencyCreditStatus byte           `xml:"emergencyCreditStatus,omitempty"`
	Href                  string         `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of AccountBalance.
type AccountBalanceLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 AccountBalanceLink"`
	Href    string   `xml:"href,attr"`
}

// Unit for accounting; use either 'energyUnit' or 'currencyUnit' to specify the unit for 'value'.
type AccountingUnit struct {
	XMLName      xml.Name   `xml:"http://ieee.org/2030.5 AccountingUnit"`
	EnergyUnit   RealEnergy `xml:"energyUnit,omitempty"`
	MonetaryUnit uint       `xml:"monetaryUnit"`
	Multiplier   byte       `xml:"multiplier"`
	Value        int        `xml:"value"`
}

// SHALL contain a Link to a List of active BillingPeriod instances.
type ActiveBillingPeriodListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveBillingPeriodListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active CreditRegister instances.
type ActiveCreditRegisterListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveCreditRegisterListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active DERControl instances.
type ActiveDERControlListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveDERControlListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active EndDeviceControl instances.
type ActiveEndDeviceControlListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveEndDeviceControlListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active FlowReservation instances.
type ActiveFlowReservationListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveFlowReservationListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// The active (real) power P (in W) is the product of root-mean-square (RMS) voltage, RMS current, and cos(theta) where theta is the phase angle of current relative to voltage.  It is the primary measure of the rate of flow of energy.
type ActivePower struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 ActivePower"`
	Multiplier byte     `xml:"multiplier"`
	Value      int      `xml:"value"`
}

// SHALL contain a Link to a List of active ProjectionReading instances.
type ActiveProjectionReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveProjectionReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active SupplyInterruptionOverride instances.
type ActiveSupplyInterruptionOverrideListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveSupplyInterruptionOverrideListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active TargetReading instances.
type ActiveTargetReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveTargetReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active TextMessage instances.
type ActiveTextMessageListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveTextMessageListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to a List of active TimeTariffInterval instances.
type ActiveTimeTariffIntervalListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ActiveTimeTariffIntervalListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Available electric charge
type AmpereHour struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 AmpereHour"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint     `xml:"value"`
}

// The apparent power S (in VA) is the product of root mean square (RMS) voltage and RMS current.
type ApparentPower struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 ApparentPower"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint     `xml:"value"`
}

// The ApplianceLoadReduction object is used by a Demand Response service provider to provide signals for ENERGY STAR compliant appliances. See the definition of ApplianceLoadReductionType for more information.
type ApplianceLoadReduction struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ApplianceLoadReduction"`
	Type    byte     `xml:"type"`
}

// Specifies the value of the TargetReduction applied by the device.
type AppliedTargetReduction struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 AppliedTargetReduction"`
	Type    byte     `xml:"type"`
	Value   uint     `xml:"value"`
}

// SHALL contain a Link to a List of DERPrograms having the DERControl(s) for this DER.
type AssociatedDERProgramListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 AssociatedDERProgramListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to an instance of UsagePoint.  If present, this is the submeter that monitors the DER output.
type AssociatedUsagePointLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 AssociatedUsagePointLink"`
	Href    string   `xml:"href,attr"`
}

// Contains historical, target, and projection readings of various types, possibly associated with charges.
type BillingMeterReadingBase struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 BillingMeterReadingBase"`
	MRID                      HexBinary128              `xml:"mRID"`
	Description               String32                  `xml:"description,omitempty"`
	Version                   uint                      `xml:"version,omitempty"`
	BillingReadingSetListLink BillingReadingSetListLink `xml:"BillingReadingSetListLink,omitempty"`
	ReadingTypeLink           ReadingTypeLink           `xml:"ReadingTypeLink,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

// A Billing Period relates to the period of time on which a customer is billed.  As an example the billing period interval for a particular customer might be 31 days starting on July 1, 2011. The start date and interval can change on each billing period. There may also be multiple billing periods related to a customer agreement to support different tariff structures.
type BillingPeriod struct {
	XMLName         xml.Name         `xml:"http://ieee.org/2030.5 BillingPeriod"`
	BillLastPeriod  int64            `xml:"billLastPeriod,omitempty"`
	BillToDate      int64            `xml:"billToDate,omitempty"`
	Interval        DateTimeInterval `xml:"interval"`
	StatusTimeStamp int64            `xml:"statusTimeStamp,omitempty"`
	Href            string           `xml:"href,attr,omitempty"`
}

// A List element to hold BillingPeriod objects.
type BillingPeriodList struct {
	XMLName       xml.Name        `xml:"http://ieee.org/2030.5 BillingPeriodList"`
	BillingPeriod []BillingPeriod `xml:"BillingPeriod,omitempty"`
	All           uint            `xml:"all,attr"`
	Results       byte            `xml:"results,attr"`
	Subscribable  byte            `xml:"subscribable,attr,omitempty"`
	Href          string          `xml:"href,attr,omitempty"`
}

func (t *BillingPeriodList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T BillingPeriodList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of BillingPeriod instances.
type BillingPeriodListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 BillingPeriodListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Data captured at regular intervals of time. Interval data could be captured as incremental data, absolute data, or relative data. The source for the data is usually a tariff quantity or an engineering quantity. Data is typically captured in time-tagged, uniform, fixed-length intervals of 5 min, 10 min, 15 min, 30 min, or 60 min. However, consumption aggregations can also be represented with this class.
type BillingReading struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 BillingReading"`
	ConsumptionBlock byte             `xml:"consumptionBlock,omitempty"`
	QualityFlags     HexBinary16      `xml:"qualityFlags,omitempty"`
	TimePeriod       DateTimeInterval `xml:"timePeriod,omitempty"`
	TouTier          byte             `xml:"touTier,omitempty"`
	Value            int64            `xml:"value,omitempty"`
	Charge           []Charge         `xml:"Charge,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

// A List element to hold BillingReading objects.
type BillingReadingList struct {
	XMLName        xml.Name         `xml:"http://ieee.org/2030.5 BillingReadingList"`
	BillingReading []BillingReading `xml:"BillingReading,omitempty"`
	All            uint             `xml:"all,attr"`
	Results        byte             `xml:"results,attr"`
	Href           string           `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of BillingReading instances.
type BillingReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 BillingReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Time sequence of readings of the same reading type.
type BillingReadingSet struct {
	XMLName                xml.Name               `xml:"http://ieee.org/2030.5 BillingReadingSet"`
	MRID                   HexBinary128           `xml:"mRID"`
	Description            String32               `xml:"description,omitempty"`
	Version                uint                   `xml:"version,omitempty"`
	TimePeriod             DateTimeInterval       `xml:"timePeriod"`
	BillingReadingListLink BillingReadingListLink `xml:"BillingReadingListLink,omitempty"`
	Href                   string                 `xml:"href,attr,omitempty"`
}

// A List element to hold BillingReadingSet objects.
type BillingReadingSetList struct {
	XMLName           xml.Name            `xml:"http://ieee.org/2030.5 BillingReadingSetList"`
	BillingReadingSet []BillingReadingSet `xml:"BillingReadingSet,omitempty"`
	All               uint                `xml:"all,attr"`
	Results           byte                `xml:"results,attr"`
	Subscribable      byte                `xml:"subscribable,attr,omitempty"`
	Href              string              `xml:"href,attr,omitempty"`
}

func (t *BillingReadingSetList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T BillingReadingSetList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of BillingReadingSet instances.
type BillingReadingSetListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 BillingReadingSetListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Charges contain charges on a customer bill.  These could be items like taxes, levies, surcharges, rebates, or others.  This is meant to allow the HAN device to retrieve enough information to be able to reconstruct an estimate of what the total bill would look like.
//
// Providers can provide line item billing, including multiple charge kinds (e.g. taxes, surcharges) at whatever granularity desired, using as many Charges as desired during a billing period. There can also be any number of Charges associated with different ReadingTypes to distinguish between TOU tiers, consumption blocks, or demand charges.
type Charge struct {
	XMLName     xml.Name `xml:"http://ieee.org/2030.5 Charge"`
	Description String20 `xml:"description,omitempty"`
	Kind        byte     `xml:"kind,omitempty"`
	Value       int      `xml:"value"`
}

// Indicates a condition that must be satisfied for the Notification to be triggered.
type Condition struct {
	XMLName             xml.Name `xml:"http://ieee.org/2030.5 Condition"`
	AttributeIdentifier byte     `xml:"attributeIdentifier"`
	LowerThreshold      int64    `xml:"lowerThreshold"`
	UpperThreshold      int64    `xml:"upperThreshold"`
}

// This resource contains various settings to control the operation of the device
type Configuration struct {
	XMLName                  xml.Name                 `xml:"http://ieee.org/2030.5 Configuration"`
	CurrentLocale            String42                 `xml:"currentLocale"`
	PowerConfiguration       PowerConfiguration       `xml:"PowerConfiguration,omitempty"`
	PriceResponseCfgListLink PriceResponseCfgListLink `xml:"PriceResponseCfgListLink,omitempty"`
	TimeConfiguration        TimeConfiguration        `xml:"TimeConfiguration,omitempty"`
	UserDeviceName           String32                 `xml:"userDeviceName"`
	PollRate                 uint                     `xml:"pollRate,attr,omitempty"`
	Subscribable             byte                     `xml:"subscribable,attr,omitempty"`
	Href                     string                   `xml:"href,attr,omitempty"`
}

func (t *Configuration) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Configuration
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of Configuration.
type ConfigurationLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ConfigurationLink"`
	Href    string   `xml:"href,attr"`
}

// DER ConnectStatus value (bitmap):
// 0 - Connected
// 1 - Available
// 2 - Operating
// 3 - Test
// 4 - Fault / Error
// All other values reserved.
type ConnectStatusType struct {
	XMLName  xml.Name   `xml:"http://ieee.org/2030.5 ConnectStatusType"`
	DateTime int64      `xml:"dateTime"`
	Value    HexBinary8 `xml:"value"`
}

// One of a sequence of thresholds defined in terms of consumption quantity of a service such as electricity, water, gas, etc. It defines the steps or blocks in a step tariff structure, where startValue simultaneously defines the entry value of this step and the closing value of the previous step. Where consumption is greater than startValue, it falls within this block and where consumption is less than or equal to startValue, it falls within one of the previous blocks.
type ConsumptionTariffInterval struct {
	XMLName           xml.Name            `xml:"http://ieee.org/2030.5 ConsumptionTariffInterval"`
	ConsumptionBlock  byte                `xml:"consumptionBlock"`
	EnvironmentalCost []EnvironmentalCost `xml:"EnvironmentalCost,omitempty"`
	Price             int                 `xml:"price,omitempty"`
	StartValue        uint64              `xml:"startValue"`
	Href              string              `xml:"href,attr,omitempty"`
}

// A List element to hold ConsumptionTariffInterval objects.
type ConsumptionTariffIntervalList struct {
	XMLName                   xml.Name                    `xml:"http://ieee.org/2030.5 ConsumptionTariffIntervalList"`
	ConsumptionTariffInterval []ConsumptionTariffInterval `xml:"ConsumptionTariffInterval,omitempty"`
	All                       uint                        `xml:"all,attr"`
	Results                   byte                        `xml:"results,attr"`
	Href                      string                      `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of ConsumptionTariffInterval instances.
type ConsumptionTariffIntervalListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ConsumptionTariffIntervalListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// CreditRegister instances define a credit-modifying transaction. Typically this would be a credit-adding transaction, but may be a subtracting transaction (perhaps in response to an out-of-band debt signal).
type CreditRegister struct {
	XMLName       xml.Name       `xml:"http://ieee.org/2030.5 CreditRegister"`
	MRID          HexBinary128   `xml:"mRID"`
	Description   String32       `xml:"description,omitempty"`
	Version       uint           `xml:"version,omitempty"`
	CreditAmount  AccountingUnit `xml:"creditAmount"`
	CreditType    byte           `xml:"creditType,omitempty"`
	EffectiveTime int64          `xml:"effectiveTime"`
	Token         String32       `xml:"token"`
	Href          string         `xml:"href,attr,omitempty"`
}

// A List element to hold CreditRegister objects.
type CreditRegisterList struct {
	XMLName        xml.Name         `xml:"http://ieee.org/2030.5 CreditRegisterList"`
	CreditRegister []CreditRegister `xml:"CreditRegister,omitempty"`
	All            uint             `xml:"all,attr"`
	Results        byte             `xml:"results,attr"`
	Href           string           `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of CreditRegister instances.
type CreditRegisterListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 CreditRegisterListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Specifies a change to the credit type.
type CreditTypeChange struct {
	XMLName   xml.Name `xml:"http://ieee.org/2030.5 CreditTypeChange"`
	NewType   byte     `xml:"newType"`
	StartTime int64    `xml:"startTime"`
}

// SHALL contain a Link to an instance of DERProgram.  If present, this is the DERProgram containing the currently active DERControl.
type CurrentDERProgramLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 CurrentDERProgramLink"`
	Href    string   `xml:"href,attr"`
}

// Average flow of charge through a conductor.
type CurrentRMS struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 CurrentRMS"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint     `xml:"value"`
}

// Data point values for defining a curve or schedule
type CurveData struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 CurveData"`
	Xvalue  int      `xml:"xvalue"`
	Yvalue  int      `xml:"yvalue"`
}

// Assignment of a group of products and services purchased by the Customer through a CustomerAgreement, used as a mechanism for customer billing and payment. It contains common information from the various types of CustomerAgreements to create billings (invoices) for a Customer and receive payment.
type CustomerAccount struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 CustomerAccount"`
	MRID                      HexBinary128              `xml:"mRID"`
	Description               String32                  `xml:"description,omitempty"`
	Version                   uint                      `xml:"version,omitempty"`
	Currency                  uint                      `xml:"currency"`
	CustomerAccount           String42                  `xml:"customerAccount,omitempty"`
	CustomerAgreementListLink CustomerAgreementListLink `xml:"CustomerAgreementListLink,omitempty"`
	CustomerName              String42                  `xml:"customerName,omitempty"`
	PricePowerOfTenMultiplier byte                      `xml:"pricePowerOfTenMultiplier"`
	ServiceSupplierLink       ServiceSupplierLink       `xml:"ServiceSupplierLink,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of CustomerAccount.
type CustomerAccountLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 CustomerAccountLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold CustomerAccount objects.
type CustomerAccountList struct {
	XMLName         xml.Name          `xml:"http://ieee.org/2030.5 CustomerAccountList"`
	CustomerAccount []CustomerAccount `xml:"CustomerAccount,omitempty"`
	PollRate        uint              `xml:"pollRate,attr,omitempty"`
	All             uint              `xml:"all,attr"`
	Results         byte              `xml:"results,attr"`
	Subscribable    byte              `xml:"subscribable,attr,omitempty"`
	Href            string            `xml:"href,attr,omitempty"`
}

func (t *CustomerAccountList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CustomerAccountList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of CustomerAccount instances.
type CustomerAccountListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 CustomerAccountListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Agreement between the customer and the service supplier to pay for service at a specific service location. It records certain billing information about the type of service provided at the service location and is used during charge creation to determine the type of service.
type CustomerAgreement struct {
	XMLName                         xml.Name                        `xml:"http://ieee.org/2030.5 CustomerAgreement"`
	MRID                            HexBinary128                    `xml:"mRID"`
	Description                     String32                        `xml:"description,omitempty"`
	Version                         uint                            `xml:"version,omitempty"`
	ActiveBillingPeriodListLink     ActiveBillingPeriodListLink     `xml:"ActiveBillingPeriodListLink,omitempty"`
	ActiveProjectionReadingListLink ActiveProjectionReadingListLink `xml:"ActiveProjectionReadingListLink,omitempty"`
	ActiveTargetReadingListLink     ActiveTargetReadingListLink     `xml:"ActiveTargetReadingListLink,omitempty"`
	BillingPeriodListLink           BillingPeriodListLink           `xml:"BillingPeriodListLink,omitempty"`
	HistoricalReadingListLink       HistoricalReadingListLink       `xml:"HistoricalReadingListLink,omitempty"`
	PrepaymentLink                  PrepaymentLink                  `xml:"PrepaymentLink,omitempty"`
	ProjectionReadingListLink       ProjectionReadingListLink       `xml:"ProjectionReadingListLink,omitempty"`
	ServiceAccount                  String42                        `xml:"serviceAccount,omitempty"`
	ServiceLocation                 String42                        `xml:"serviceLocation,omitempty"`
	TargetReadingListLink           TargetReadingListLink           `xml:"TargetReadingListLink,omitempty"`
	TariffProfileLink               TariffProfileLink               `xml:"TariffProfileLink,omitempty"`
	UsagePointLink                  UsagePointLink                  `xml:"UsagePointLink,omitempty"`
	Href                            string                          `xml:"href,attr,omitempty"`
}

// A List element to hold CustomerAgreement objects.
type CustomerAgreementList struct {
	XMLName           xml.Name            `xml:"http://ieee.org/2030.5 CustomerAgreementList"`
	CustomerAgreement []CustomerAgreement `xml:"CustomerAgreement,omitempty"`
	All               uint                `xml:"all,attr"`
	Results           byte                `xml:"results,attr"`
	Subscribable      byte                `xml:"subscribable,attr,omitempty"`
	Href              string              `xml:"href,attr,omitempty"`
}

func (t *CustomerAgreementList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CustomerAgreementList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of CustomerAgreement instances.
type CustomerAgreementListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 CustomerAgreementListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Contains links to DER resources.
type DER struct {
	XMLName                      xml.Name                     `xml:"http://ieee.org/2030.5 DER"`
	AssociatedDERProgramListLink AssociatedDERProgramListLink `xml:"AssociatedDERProgramListLink,omitempty"`
	AssociatedUsagePointLink     AssociatedUsagePointLink     `xml:"AssociatedUsagePointLink,omitempty"`
	CurrentDERProgramLink        CurrentDERProgramLink        `xml:"CurrentDERProgramLink,omitempty"`
	DERAvailabilityLink          DERAvailabilityLink          `xml:"DERAvailabilityLink,omitempty"`
	DERCapabilityLink            DERCapabilityLink            `xml:"DERCapabilityLink,omitempty"`
	DERSettingsLink              DERSettingsLink              `xml:"DERSettingsLink,omitempty"`
	DERStatusLink                DERStatusLink                `xml:"DERStatusLink,omitempty"`
	Subscribable                 byte                         `xml:"subscribable,attr,omitempty"`
	Href                         string                       `xml:"href,attr,omitempty"`
}

func (t *DER) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DER
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// Indicates current reserve generation status
type DERAvailability struct {
	XMLName              xml.Name      `xml:"http://ieee.org/2030.5 DERAvailability"`
	AvailabilityDuration uint          `xml:"availabilityDuration,omitempty"`
	MaxChargeDuration    uint          `xml:"maxChargeDuration,omitempty"`
	ReadingTime          int64         `xml:"readingTime"`
	ReserveChargePercent uint          `xml:"reserveChargePercent,omitempty"`
	ReservePercent       uint          `xml:"reservePercent,omitempty"`
	StatVarAvail         ReactivePower `xml:"statVarAvail,omitempty"`
	StatWAvail           ActivePower   `xml:"statWAvail,omitempty"`
	Subscribable         byte          `xml:"subscribable,attr,omitempty"`
	Href                 string        `xml:"href,attr,omitempty"`
}

func (t *DERAvailability) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERAvailability
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DERAvailability.
type DERAvailabilityLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERAvailabilityLink"`
	Href    string   `xml:"href,attr"`
}

// Distributed energy resource type and nameplate ratings.
type DERCapability struct {
	XMLName               xml.Name      `xml:"http://ieee.org/2030.5 DERCapability"`
	ModesSupported        HexBinary32   `xml:"modesSupported"`
	RtgA                  CurrentRMS    `xml:"rtgA"`
	RtgAbnormalCategory   byte          `xml:"rtgAbnormalCategory,omitempty"`
	RtgAh                 AmpereHour    `xml:"rtgAh,omitempty"`
	RtgMaxChargeRateVA    ApparentPower `xml:"rtgMaxChargeRateVA,omitempty"`
	RtgMaxChargeRateW     ActivePower   `xml:"rtgMaxChargeRateW,omitempty"`
	RtgMaxDischargeRateVA ApparentPower `xml:"rtgMaxDischargeRateVA,omitempty"`
	RtgMaxDischargeRateW  ActivePower   `xml:"rtgMaxDischargeRateW,omitempty"`
	RtgMinPF              PowerFactor   `xml:"rtgMinPF,omitempty"`
	RtgMinPFNeg           PowerFactor   `xml:"rtgMinPFNeg,omitempty"`
	RtgNormalCategory     byte          `xml:"rtgNormalCategory,omitempty"`
	RtgOverExcitedPF      PowerFactor   `xml:"rtgOverExcitedPF,omitempty"`
	RtgOverExcitedW       ActivePower   `xml:"rtgOverExcitedW,omitempty"`
	RtgUnderExcitedPF     PowerFactor   `xml:"rtgUnderExcitedPF,omitempty"`
	RtgUnderExcitedW      ActivePower   `xml:"rtgUnderExcitedW,omitempty"`
	RtgVA                 ApparentPower `xml:"rtgVA,omitempty"`
	RtgVar                ReactivePower `xml:"rtgVar,omitempty"`
	RtgVarNeg             ReactivePower `xml:"rtgVarNeg,omitempty"`
	RtgW                  ActivePower   `xml:"rtgW"`
	RtgWh                 WattHour      `xml:"rtgWh,omitempty"`
	Type                  byte          `xml:"type"`
	Href                  string        `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of DERCapability.
type DERCapabilityLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERCapabilityLink"`
	Href    string   `xml:"href,attr"`
}

// Distributed Energy Resource (DER) time/event-based control.
type DERControl struct {
	XMLName           xml.Name         `xml:"http://ieee.org/2030.5 DERControl"`
	MRID              HexBinary128     `xml:"mRID"`
	Description       String32         `xml:"description,omitempty"`
	Version           uint             `xml:"version,omitempty"`
	CreationTime      int64            `xml:"creationTime"`
	EventStatus       EventStatus      `xml:"EventStatus"`
	Interval          DateTimeInterval `xml:"interval"`
	RandomizeDuration int              `xml:"randomizeDuration,omitempty"`
	RandomizeStart    int              `xml:"randomizeStart,omitempty"`
	DERControlBase    DERControlBase   `xml:"DERControlBase"`
	Subscribable      byte             `xml:"subscribable,attr,omitempty"`
	ReplyTo           string           `xml:"replyTo,attr,omitempty"`
	ResponseRequired  HexBinary8       `xml:"responseRequired,attr,omitempty"`
	Href              string           `xml:"href,attr,omitempty"`
}

func (t *DERControl) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERControl
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// Distributed Energy Resource (DER) control values.
type DERControlBase struct {
	XMLName                     xml.Name      `xml:"http://ieee.org/2030.5 DERControlBase"`
	OpModConnect                bool          `xml:"opModConnect,omitempty"`
	OpModEnergize               bool          `xml:"opModEnergize,omitempty"`
	OpModFixedPF                PowerFactor   `xml:"opModFixedPF,omitempty"`
	OpModFixedVar               FixedVar      `xml:"opModFixedVar,omitempty"`
	OpModFixedW                 int           `xml:"opModFixedW,omitempty"`
	OpModFreqDroop              FreqDroopType `xml:"opModFreqDroop,omitempty"`
	OpModFreqWatt               DERCurveLink  `xml:"opModFreqWatt,omitempty"`
	OpModHFRTMustTrip           DERCurveLink  `xml:"opModHFRTMustTrip,omitempty"`
	OpModHVRTMomentaryCessation DERCurveLink  `xml:"opModHVRTMomentaryCessation,omitempty"`
	OpModHVRTMustTrip           DERCurveLink  `xml:"opModHVRTMustTrip,omitempty"`
	OpModLFRTMustTrip           DERCurveLink  `xml:"opModLFRTMustTrip,omitempty"`
	OpModLVRTMomentaryCessation DERCurveLink  `xml:"opModLVRTMomentaryCessation,omitempty"`
	OpModLVRTMustTrip           DERCurveLink  `xml:"opModLVRTMustTrip,omitempty"`
	OpModMaxLimW                uint          `xml:"opModMaxLimW,omitempty"`
	OpModTargetVar              ReactivePower `xml:"opModTargetVar,omitempty"`
	OpModTargetW                ActivePower   `xml:"opModTargetW,omitempty"`
	OpModVoltVar                DERCurveLink  `xml:"opModVoltVar,omitempty"`
	OpModVoltWatt               DERCurveLink  `xml:"opModVoltWatt,omitempty"`
	OpModWattPF                 DERCurveLink  `xml:"opModWattPF,omitempty"`
	OpModWattVar                DERCurveLink  `xml:"opModWattVar,omitempty"`
	RampTms                     uint          `xml:"rampTms,omitempty"`
}

// A List element to hold DERControl objects.
type DERControlList struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 DERControlList"`
	DERControl   []DERControl `xml:"DERControl,omitempty"`
	All          uint         `xml:"all,attr"`
	Results      byte         `xml:"results,attr"`
	Subscribable byte         `xml:"subscribable,attr,omitempty"`
	Href         string       `xml:"href,attr,omitempty"`
}

func (t *DERControlList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERControlList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of DERControl instances.
type DERControlListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERControlListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A response to a DERControl
type DERControlResponse struct {
	XMLName         xml.Name     `xml:"http://ieee.org/2030.5 DERControlResponse"`
	CreatedDateTime int64        `xml:"createdDateTime,omitempty"`
	EndDeviceLFDI   HexBinary160 `xml:"endDeviceLFDI"`
	Status          byte         `xml:"status,omitempty"`
	Subject         HexBinary128 `xml:"subject"`
	Href            string       `xml:"href,attr,omitempty"`
}

// DER related curves such as Volt-Var mode curves. Relationship between an independent variable (X-axis) and a dependent variable (Y-axis).
type DERCurve struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 DERCurve"`
	MRID         HexBinary128 `xml:"mRID"`
	Description  String32     `xml:"description,omitempty"`
	Version      uint         `xml:"version,omitempty"`
	CreationTime int64        `xml:"creationTime"`
	CurveData    []CurveData  `xml:"CurveData"`
	CurveType    byte         `xml:"curveType"`
	OpenLoopTms  uint         `xml:"openLoopTms,omitempty"`
	RampDecTms   uint         `xml:"rampDecTms,omitempty"`
	RampIncTms   uint         `xml:"rampIncTms,omitempty"`
	RampPT1Tms   uint         `xml:"rampPT1Tms,omitempty"`
	XMultiplier  byte         `xml:"xMultiplier"`
	YMultiplier  byte         `xml:"yMultiplier"`
	YRefType     byte         `xml:"yRefType"`
	Href         string       `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of DERCurve.
type DERCurveLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERCurveLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold DERCurve objects.
type DERCurveList struct {
	XMLName  xml.Name   `xml:"http://ieee.org/2030.5 DERCurveList"`
	DERCurve []DERCurve `xml:"DERCurve,omitempty"`
	All      uint       `xml:"all,attr"`
	Results  byte       `xml:"results,attr"`
	Href     string     `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of DERCurve instances.
type DERCurveListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERCurveListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to an instance of DER.
type DERLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold DER objects.
type DERList struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 DERList"`
	DER      []DER    `xml:"DER,omitempty"`
	PollRate uint     `xml:"pollRate,attr,omitempty"`
	All      uint     `xml:"all,attr"`
	Results  byte     `xml:"results,attr"`
	Href     string   `xml:"href,attr,omitempty"`
}

func (t *DERList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of DER instances.
type DERListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Distributed Energy Resource program.
type DERProgram struct {
	XMLName                  xml.Name                 `xml:"http://ieee.org/2030.5 DERProgram"`
	MRID                     HexBinary128             `xml:"mRID"`
	Description              String32                 `xml:"description,omitempty"`
	Version                  uint                     `xml:"version,omitempty"`
	ActiveDERControlListLink ActiveDERControlListLink `xml:"ActiveDERControlListLink,omitempty"`
	DefaultDERControlLink    DefaultDERControlLink    `xml:"DefaultDERControlLink,omitempty"`
	DERControlListLink       DERControlListLink       `xml:"DERControlListLink,omitempty"`
	DERCurveListLink         DERCurveListLink         `xml:"DERCurveListLink,omitempty"`
	Primacy                  byte                     `xml:"primacy"`
	Subscribable             byte                     `xml:"subscribable,attr,omitempty"`
	Href                     string                   `xml:"href,attr,omitempty"`
}

func (t *DERProgram) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERProgram
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DERProgram.
type DERProgramLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERProgramLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold DERProgram objects.
type DERProgramList struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 DERProgramList"`
	DERProgram   []DERProgram `xml:"DERProgram,omitempty"`
	PollRate     uint         `xml:"pollRate,attr,omitempty"`
	All          uint         `xml:"all,attr"`
	Results      byte         `xml:"results,attr"`
	Subscribable byte         `xml:"subscribable,attr,omitempty"`
	Href         string       `xml:"href,attr,omitempty"`
}

func (t *DERProgramList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERProgramList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of DERProgram instances.
type DERProgramListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERProgramListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Distributed energy resource settings
type DERSettings struct {
	XMLName               xml.Name      `xml:"http://ieee.org/2030.5 DERSettings"`
	ModesEnabled          HexBinary32   `xml:"modesEnabled,omitempty"`
	SetESDelay            uint          `xml:"setESDelay,omitempty"`
	SetESHighFreq         uint          `xml:"setESHighFreq,omitempty"`
	SetESHighVolt         int           `xml:"setESHighVolt,omitempty"`
	SetESLowFreq          uint          `xml:"setESLowFreq,omitempty"`
	SetESLowVolt          int           `xml:"setESLowVolt,omitempty"`
	SetESRandomDelay      uint          `xml:"setESRandomDelay,omitempty"`
	SetGradW              uint          `xml:"setGradW"`
	SetMaxA               CurrentRMS    `xml:"setMaxA,omitempty"`
	SetMaxAh              AmpereHour    `xml:"setMaxAh,omitempty"`
	SetMaxChargeRateVA    ApparentPower `xml:"setMaxChargeRateVA,omitempty"`
	SetMaxChargeRateW     ActivePower   `xml:"setMaxChargeRateW,omitempty"`
	SetMaxDischargeRateVA ApparentPower `xml:"setMaxDischargeRateVA,omitempty"`
	SetMaxDischargeRateW  ActivePower   `xml:"setMaxDischargeRateW,omitempty"`
	SetMaxVA              ApparentPower `xml:"setMaxVA,omitempty"`
	SetMaxVar             ReactivePower `xml:"setMaxVar,omitempty"`
	SetMaxVarNeg          ReactivePower `xml:"setMaxVarNeg,omitempty"`
	SetMaxW               ActivePower   `xml:"setMaxW"`
	SetMaxWh              WattHour      `xml:"setMaxWh,omitempty"`
	SetMinPF              PowerFactor   `xml:"setMinPF,omitempty"`
	SetMinPFNeg           PowerFactor   `xml:"setMinPFNeg,omitempty"`
	SetSoftGradW          uint          `xml:"setSoftGradW,omitempty"`
	SetVRef               VoltageRMS    `xml:"setVRef,omitempty"`
	SetVRefOfs            VoltageRMS    `xml:"setVRefOfs,omitempty"`
	UpdatedTime           int64         `xml:"updatedTime"`
	Subscribable          byte          `xml:"subscribable,attr,omitempty"`
	Href                  string        `xml:"href,attr,omitempty"`
}

func (t *DERSettings) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERSettings
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DERSettings.
type DERSettingsLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERSettingsLink"`
	Href    string   `xml:"href,attr"`
}

// DER status information.
type DERStatus struct {
	XMLName                xml.Name                   `xml:"http://ieee.org/2030.5 DERStatus"`
	GenConnectStatus       ConnectStatusType          `xml:"genConnectStatus,omitempty"`
	InverterStatus         InverterStatusType         `xml:"inverterStatus,omitempty"`
	LocalControlModeStatus LocalControlModeStatusType `xml:"localControlModeStatus,omitempty"`
	ManufacturerStatus     ManufacturerStatusType     `xml:"manufacturerStatus,omitempty"`
	OperationalModeStatus  OperationalModeStatusType  `xml:"operationalModeStatus,omitempty"`
	ReadingTime            int64                      `xml:"readingTime"`
	StateOfChargeStatus    StateOfChargeStatusType    `xml:"stateOfChargeStatus,omitempty"`
	StorageModeStatus      StorageModeStatusType      `xml:"storageModeStatus,omitempty"`
	StorConnectStatus      ConnectStatusType          `xml:"storConnectStatus,omitempty"`
	Subscribable           byte                       `xml:"subscribable,attr,omitempty"`
	Href                   string                     `xml:"href,attr,omitempty"`
}

func (t *DERStatus) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DERStatus
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DERStatus.
type DERStatusLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DERStatusLink"`
	Href    string   `xml:"href,attr"`
}

// Contains information about the static capabilities of the device, to allow service providers to know what types of functions are supported, what the normal operating ranges and limits are, and other similar information, in order to provide better suggestions of applicable programs to receive the maximum benefit.
type DRLCCapabilities struct {
	XMLName            xml.Name    `xml:"http://ieee.org/2030.5 DRLCCapabilities"`
	AverageEnergy      RealEnergy  `xml:"averageEnergy"`
	MaxDemand          ActivePower `xml:"maxDemand"`
	OptionsImplemented HexBinary32 `xml:"optionsImplemented"`
}

// Interval of date and time.
type DateTimeInterval struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 DateTimeInterval"`
	Duration uint     `xml:"duration"`
	Start    int64    `xml:"start"`
}

// Contains control mode information to be used if no active DERControl is found.
type DefaultDERControl struct {
	XMLName          xml.Name       `xml:"http://ieee.org/2030.5 DefaultDERControl"`
	MRID             HexBinary128   `xml:"mRID"`
	Description      String32       `xml:"description,omitempty"`
	Version          uint           `xml:"version,omitempty"`
	DERControlBase   DERControlBase `xml:"DERControlBase"`
	SetESDelay       uint           `xml:"setESDelay,omitempty"`
	SetESHighFreq    uint           `xml:"setESHighFreq,omitempty"`
	SetESHighVolt    int            `xml:"setESHighVolt,omitempty"`
	SetESLowFreq     uint           `xml:"setESLowFreq,omitempty"`
	SetESLowVolt     int            `xml:"setESLowVolt,omitempty"`
	SetESRandomDelay uint           `xml:"setESRandomDelay,omitempty"`
	SetGradW         uint           `xml:"setGradW,omitempty"`
	SetSoftGradW     uint           `xml:"setSoftGradW,omitempty"`
	Subscribable     byte           `xml:"subscribable,attr,omitempty"`
	Href             string         `xml:"href,attr,omitempty"`
}

func (t *DefaultDERControl) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DefaultDERControl
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DefaultDERControl. This is the default mode of the DER which MAY be overridden by DERControl events.
type DefaultDERControlLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DefaultDERControlLink"`
	Href    string   `xml:"href,attr"`
}

// Demand response program.
type DemandResponseProgram struct {
	XMLName                                  xml.Name                       `xml:"http://ieee.org/2030.5 DemandResponseProgram"`
	MRID                                     HexBinary128                   `xml:"mRID"`
	Description                              String32                       `xml:"description,omitempty"`
	Version                                  uint                           `xml:"version,omitempty"`
	ActiveEndDeviceControlListLink           ActiveEndDeviceControlListLink `xml:"ActiveEndDeviceControlListLink,omitempty"`
	AvailabilityUpdatePercentChangeThreshold uint                           `xml:"availabilityUpdatePercentChangeThreshold,omitempty"`
	AvailabilityUpdatePowerChangeThreshold   ActivePower                    `xml:"availabilityUpdatePowerChangeThreshold,omitempty"`
	EndDeviceControlListLink                 EndDeviceControlListLink       `xml:"EndDeviceControlListLink,omitempty"`
	Primacy                                  byte                           `xml:"primacy"`
	Href                                     string                         `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of DemandResponseProgram.
type DemandResponseProgramLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DemandResponseProgramLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold DemandResponseProgram objects.
type DemandResponseProgramList struct {
	XMLName               xml.Name                `xml:"http://ieee.org/2030.5 DemandResponseProgramList"`
	DemandResponseProgram []DemandResponseProgram `xml:"DemandResponseProgram,omitempty"`
	PollRate              uint                    `xml:"pollRate,attr,omitempty"`
	All                   uint                    `xml:"all,attr"`
	Results               byte                    `xml:"results,attr"`
	Subscribable          byte                    `xml:"subscribable,attr,omitempty"`
	Href                  string                  `xml:"href,attr,omitempty"`
}

func (t *DemandResponseProgramList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DemandResponseProgramList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of DemandResponseProgram instances.
type DemandResponseProgramListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DemandResponseProgramListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Returned by the URI provided by DNS-SD, to allow clients to find the URIs to the resources in which they are interested.
type DeviceCapability struct {
	XMLName                       xml.Name                      `xml:"http://ieee.org/2030.5 DeviceCapability"`
	CustomerAccountListLink       CustomerAccountListLink       `xml:"CustomerAccountListLink,omitempty"`
	DemandResponseProgramListLink DemandResponseProgramListLink `xml:"DemandResponseProgramListLink,omitempty"`
	DERProgramListLink            DERProgramListLink            `xml:"DERProgramListLink,omitempty"`
	FileListLink                  FileListLink                  `xml:"FileListLink,omitempty"`
	MessagingProgramListLink      MessagingProgramListLink      `xml:"MessagingProgramListLink,omitempty"`
	PrepaymentListLink            PrepaymentListLink            `xml:"PrepaymentListLink,omitempty"`
	ResponseSetListLink           ResponseSetListLink           `xml:"ResponseSetListLink,omitempty"`
	TariffProfileListLink         TariffProfileListLink         `xml:"TariffProfileListLink,omitempty"`
	TimeLink                      TimeLink                      `xml:"TimeLink,omitempty"`
	UsagePointListLink            UsagePointListLink            `xml:"UsagePointListLink,omitempty"`
	EndDeviceListLink             EndDeviceListLink             `xml:"EndDeviceListLink,omitempty"`
	MirrorUsagePointListLink      MirrorUsagePointListLink      `xml:"MirrorUsagePointListLink,omitempty"`
	SelfDeviceLink                SelfDeviceLink                `xml:"SelfDeviceLink,omitempty"`
	PollRate                      uint                          `xml:"pollRate,attr,omitempty"`
	Href                          string                        `xml:"href,attr,omitempty"`
}

func (t *DeviceCapability) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DeviceCapability
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DeviceCapability.
type DeviceCapabilityLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DeviceCapabilityLink"`
	Href    string   `xml:"href,attr"`
}

// Contains identification and other information about the device that changes very infrequently, typically only when updates are applied, if ever.
type DeviceInformation struct {
	XMLName                 xml.Name                `xml:"http://ieee.org/2030.5 DeviceInformation"`
	DRLCCapabilities        DRLCCapabilities        `xml:"DRLCCapabilities,omitempty"`
	FunctionsImplemented    HexBinary64             `xml:"functionsImplemented,omitempty"`
	LFDI                    HexBinary160            `xml:"lFDI"`
	MfDate                  int64                   `xml:"mfDate"`
	MfHwVer                 String32                `xml:"mfHwVer"`
	MfID                    uint                    `xml:"mfID"`
	MfInfo                  String32                `xml:"mfInfo,omitempty"`
	MfModel                 String32                `xml:"mfModel"`
	MfSerNum                String32                `xml:"mfSerNum"`
	PrimaryPower            byte                    `xml:"primaryPower"`
	SecondaryPower          byte                    `xml:"secondaryPower"`
	SupportedLocaleListLink SupportedLocaleListLink `xml:"SupportedLocaleListLink,omitempty"`
	SwActTime               int64                   `xml:"swActTime"`
	SwVer                   String32                `xml:"swVer"`
	PollRate                uint                    `xml:"pollRate,attr,omitempty"`
	Href                    string                  `xml:"href,attr,omitempty"`
}

func (t *DeviceInformation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DeviceInformation
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DeviceInformation.
type DeviceInformationLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DeviceInformationLink"`
	Href    string   `xml:"href,attr"`
}

// Status of device
type DeviceStatus struct {
	XMLName     xml.Name      `xml:"http://ieee.org/2030.5 DeviceStatus"`
	ChangedTime int64         `xml:"changedTime"`
	OnCount     uint          `xml:"onCount,omitempty"`
	OpState     byte          `xml:"opState,omitempty"`
	OpTime      uint          `xml:"opTime,omitempty"`
	Temperature []Temperature `xml:"Temperature,omitempty"`
	TimeLink    TimeLink      `xml:"TimeLink,omitempty"`
	PollRate    uint          `xml:"pollRate,attr,omitempty"`
	Href        string        `xml:"href,attr,omitempty"`
}

func (t *DeviceStatus) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DeviceStatus
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of DeviceStatus.
type DeviceStatusLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 DeviceStatusLink"`
	Href    string   `xml:"href,attr"`
}

// A response to a Demand Response Load Control (EndDeviceControl) message.
type DrResponse struct {
	XMLName                xml.Name               `xml:"http://ieee.org/2030.5 DrResponse"`
	CreatedDateTime        int64                  `xml:"createdDateTime,omitempty"`
	EndDeviceLFDI          HexBinary160           `xml:"endDeviceLFDI"`
	Status                 byte                   `xml:"status,omitempty"`
	Subject                HexBinary128           `xml:"subject"`
	ApplianceLoadReduction ApplianceLoadReduction `xml:"ApplianceLoadReduction,omitempty"`
	AppliedTargetReduction AppliedTargetReduction `xml:"AppliedTargetReduction,omitempty"`
	DutyCycle              DutyCycle              `xml:"DutyCycle,omitempty"`
	Offset                 Offset                 `xml:"Offset,omitempty"`
	OverrideDuration       uint                   `xml:"overrideDuration,omitempty"`
	SetPoint               SetPoint               `xml:"SetPoint,omitempty"`
	Href                   string                 `xml:"href,attr,omitempty"`
}

// Duty cycle control is a device specific issue and is managed by the device.  The duty cycle of the device under control should span the shortest practical time period in accordance with the nature of the device under control and the intent of the request for demand reduction.  The default factory setting SHOULD be three minutes for each 10% of duty cycle.  This indicates that the default time period over which a duty cycle is applied is 30 minutes, meaning a 10% duty cycle would cause a device to be ON for 3 minutes.   The “off state” SHALL precede the “on state”.
type DutyCycle struct {
	XMLName     xml.Name `xml:"http://ieee.org/2030.5 DutyCycle"`
	NormalValue byte     `xml:"normalValue"`
}

// Asset container that performs one or more end device functions. Contains information about individual devices in the network.
type EndDevice struct {
	XMLName                         xml.Name                        `xml:"http://ieee.org/2030.5 EndDevice"`
	ConfigurationLink               ConfigurationLink               `xml:"ConfigurationLink,omitempty"`
	DERListLink                     DERListLink                     `xml:"DERListLink,omitempty"`
	DeviceInformationLink           DeviceInformationLink           `xml:"DeviceInformationLink,omitempty"`
	DeviceStatusLink                DeviceStatusLink                `xml:"DeviceStatusLink,omitempty"`
	FileStatusLink                  FileStatusLink                  `xml:"FileStatusLink,omitempty"`
	IPInterfaceListLink             IPInterfaceListLink             `xml:"IPInterfaceListLink,omitempty"`
	LFDI                            HexBinary160                    `xml:"lFDI,omitempty"`
	LoadShedAvailabilityListLink    LoadShedAvailabilityListLink    `xml:"LoadShedAvailabilityListLink,omitempty"`
	LoadShedDeviceCategory          HexBinary32                     `xml:"loadShedDeviceCategory,omitempty"`
	LogEventListLink                LogEventListLink                `xml:"LogEventListLink,omitempty"`
	PowerStatusLink                 PowerStatusLink                 `xml:"PowerStatusLink,omitempty"`
	SFDI                            uint64                          `xml:"sFDI"`
	ChangedTime                     int64                           `xml:"changedTime"`
	Enabled                         bool                            `xml:"enabled,omitempty"`
	FlowReservationRequestListLink  FlowReservationRequestListLink  `xml:"FlowReservationRequestListLink,omitempty"`
	FlowReservationResponseListLink FlowReservationResponseListLink `xml:"FlowReservationResponseListLink,omitempty"`
	FunctionSetAssignmentsListLink  FunctionSetAssignmentsListLink  `xml:"FunctionSetAssignmentsListLink,omitempty"`
	RegistrationLink                RegistrationLink                `xml:"RegistrationLink,omitempty"`
	SubscriptionListLink            SubscriptionListLink            `xml:"SubscriptionListLink,omitempty"`
	Subscribable                    byte                            `xml:"subscribable,attr,omitempty"`
	Href                            string                          `xml:"href,attr,omitempty"`
}

func (t *EndDevice) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EndDevice
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// Instructs an EndDevice to perform a specified action.
type EndDeviceControl struct {
	XMLName                xml.Name               `xml:"http://ieee.org/2030.5 EndDeviceControl"`
	MRID                   HexBinary128           `xml:"mRID"`
	Description            String32               `xml:"description,omitempty"`
	Version                uint                   `xml:"version,omitempty"`
	CreationTime           int64                  `xml:"creationTime"`
	EventStatus            EventStatus            `xml:"EventStatus"`
	Interval               DateTimeInterval       `xml:"interval"`
	RandomizeDuration      int                    `xml:"randomizeDuration,omitempty"`
	RandomizeStart         int                    `xml:"randomizeStart,omitempty"`
	ApplianceLoadReduction ApplianceLoadReduction `xml:"ApplianceLoadReduction,omitempty"`
	DeviceCategory         HexBinary32            `xml:"deviceCategory"`
	DrProgramMandatory     bool                   `xml:"drProgramMandatory"`
	DutyCycle              DutyCycle              `xml:"DutyCycle,omitempty"`
	LoadShiftForward       bool                   `xml:"loadShiftForward"`
	Offset                 Offset                 `xml:"Offset,omitempty"`
	OverrideDuration       uint                   `xml:"overrideDuration,omitempty"`
	SetPoint               SetPoint               `xml:"SetPoint,omitempty"`
	TargetReduction        TargetReduction        `xml:"TargetReduction,omitempty"`
	Subscribable           byte                   `xml:"subscribable,attr,omitempty"`
	ReplyTo                string                 `xml:"replyTo,attr,omitempty"`
	ResponseRequired       HexBinary8             `xml:"responseRequired,attr,omitempty"`
	Href                   string                 `xml:"href,attr,omitempty"`
}

func (t *EndDeviceControl) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EndDeviceControl
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// A List element to hold EndDeviceControl objects.
type EndDeviceControlList struct {
	XMLName          xml.Name           `xml:"http://ieee.org/2030.5 EndDeviceControlList"`
	EndDeviceControl []EndDeviceControl `xml:"EndDeviceControl,omitempty"`
	All              uint               `xml:"all,attr"`
	Results          byte               `xml:"results,attr"`
	Subscribable     byte               `xml:"subscribable,attr,omitempty"`
	Href             string             `xml:"href,attr,omitempty"`
}

func (t *EndDeviceControlList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EndDeviceControlList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of EndDeviceControl instances.
type EndDeviceControlListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 EndDeviceControlListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SHALL contain a Link to an instance of EndDevice.
type EndDeviceLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 EndDeviceLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold EndDevice objects.
type EndDeviceList struct {
	XMLName      xml.Name    `xml:"http://ieee.org/2030.5 EndDeviceList"`
	EndDevice    []EndDevice `xml:"EndDevice,omitempty"`
	PollRate     uint        `xml:"pollRate,attr,omitempty"`
	All          uint        `xml:"all,attr"`
	Results      byte        `xml:"results,attr"`
	Subscribable byte        `xml:"subscribable,attr,omitempty"`
	Href         string      `xml:"href,attr,omitempty"`
}

func (t *EndDeviceList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EndDeviceList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of EndDevice instances.
type EndDeviceListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 EndDeviceListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Provides alternative or secondary price information for the relevant RateComponent. Supports jurisdictions that seek to convey the environmental price per unit of the specified commodity not expressed in currency.
//
// Implementers and consumers can use this attribute to prioritize operations of their HAN devices (e.g., PEV charging during times of high availability of renewable electricity resources).
type EnvironmentalCost struct {
	XMLName       xml.Name `xml:"http://ieee.org/2030.5 EnvironmentalCost"`
	Amount        uint     `xml:"amount"`
	CostKind      byte     `xml:"costKind"`
	CostLevel     byte     `xml:"costLevel"`
	NumCostLevels byte     `xml:"numCostLevels"`
}

// Contains information about the nature of an error if a request could not be completed successfully.
type Error struct {
	XMLName          xml.Name `xml:"http://ieee.org/2030.5 Error"`
	MaxRetryDuration uint     `xml:"maxRetryDuration,omitempty"`
	ReasonCode       uint     `xml:"reasonCode"`
}

// An Event indicates information that applies to a particular period of time. Events SHALL be executed relative to the time of the server, as described in the Time function set section 11.1.
type Event struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 Event"`
	MRID             HexBinary128     `xml:"mRID"`
	Description      String32         `xml:"description,omitempty"`
	Version          uint             `xml:"version,omitempty"`
	CreationTime     int64            `xml:"creationTime"`
	EventStatus      EventStatus      `xml:"EventStatus"`
	Interval         DateTimeInterval `xml:"interval"`
	Subscribable     byte             `xml:"subscribable,attr,omitempty"`
	ReplyTo          string           `xml:"replyTo,attr,omitempty"`
	ResponseRequired HexBinary8       `xml:"responseRequired,attr,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

func (t *Event) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Event
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// Current status information relevant to a specific object. The Status object is used to indicate the current status of an Event. Devices can read the containing resource (e.g. TextMessage) to get the most up to date status of the event.  Devices can also subscribe to a specific resource instance to get updates when any of its attributes change, including the Status object.
type EventStatus struct {
	XMLName                   xml.Name  `xml:"http://ieee.org/2030.5 EventStatus"`
	CurrentStatus             byte      `xml:"currentStatus"`
	DateTime                  int64     `xml:"dateTime"`
	PotentiallySuperseded     bool      `xml:"potentiallySuperseded"`
	PotentiallySupersededTime int64     `xml:"potentiallySupersededTime,omitempty"`
	Reason                    String192 `xml:"reason,omitempty"`
}

// This resource contains various meta-data describing a file's characteristics.  The meta-data provides general file information and also is used to support filtered queries of file lists
type File struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 File"`
	ActivateTime int64        `xml:"activateTime,omitempty"`
	FileURI      string       `xml:"fileURI"`
	LFDI         HexBinary160 `xml:"lFDI,omitempty"`
	MfHwVer      String32     `xml:"mfHwVer,omitempty"`
	MfID         uint         `xml:"mfID"`
	MfModel      String32     `xml:"mfModel"`
	MfSerNum     String32     `xml:"mfSerNum,omitempty"`
	MfVer        String16     `xml:"mfVer"`
	Size         uint         `xml:"size"`
	Type         HexBinary16  `xml:"type"`
	Href         string       `xml:"href,attr,omitempty"`
}

// This element MUST be set to the URI of the most recent File being loaded/activated by the LD. In the case of file status 0, this element MUST be omitted.
type FileLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FileLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold File objects.
type FileList struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 FileList"`
	File     []File   `xml:"File,omitempty"`
	PollRate uint     `xml:"pollRate,attr,omitempty"`
	All      uint     `xml:"all,attr"`
	Results  byte     `xml:"results,attr"`
	Href     string   `xml:"href,attr,omitempty"`
}

func (t *FileList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FileList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of File instances.
type FileListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FileListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// This object provides status of device file load and activation operations.
type FileStatus struct {
	XMLName            xml.Name `xml:"http://ieee.org/2030.5 FileStatus"`
	ActivateTime       int64    `xml:"activateTime,omitempty"`
	FileLink           FileLink `xml:"FileLink,omitempty"`
	LoadPercent        byte     `xml:"loadPercent"`
	NextRequestAttempt int64    `xml:"nextRequestAttempt"`
	Request503Count    uint     `xml:"request503Count"`
	RequestFailCount   uint     `xml:"requestFailCount"`
	Status             byte     `xml:"status"`
	StatusTime         int64    `xml:"statusTime"`
	PollRate           uint     `xml:"pollRate,attr,omitempty"`
	Href               string   `xml:"href,attr,omitempty"`
}

func (t *FileStatus) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FileStatus
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of FileStatus.
type FileStatusLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FileStatusLink"`
	Href    string   `xml:"href,attr"`
}

// Abstract type for specifying a fixed-point value without a given unit of measure.
type FixedPointType struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 FixedPointType"`
	Multiplier byte     `xml:"multiplier"`
	Value      int      `xml:"value"`
}

// Specifies a signed setpoint for reactive power.
type FixedVar struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FixedVar"`
	RefType byte     `xml:"refType"`
	Value   int      `xml:"value"`
}

// Used to request flow transactions. Client EndDevices submit a request for charging or discharging from the server. The server creates an associated FlowReservationResponse containing the charging parameters and interval to provide a lower aggregated demand at the premises, or within a larger part of the distribution system.
type FlowReservationRequest struct {
	XMLName           xml.Name         `xml:"http://ieee.org/2030.5 FlowReservationRequest"`
	MRID              HexBinary128     `xml:"mRID"`
	Description       String32         `xml:"description,omitempty"`
	Version           uint             `xml:"version,omitempty"`
	CreationTime      int64            `xml:"creationTime"`
	DurationRequested uint             `xml:"durationRequested,omitempty"`
	EnergyRequested   SignedRealEnergy `xml:"energyRequested"`
	IntervalRequested DateTimeInterval `xml:"intervalRequested"`
	PowerRequested    ActivePower      `xml:"powerRequested"`
	RequestStatus     RequestStatus    `xml:"RequestStatus"`
	Href              string           `xml:"href,attr,omitempty"`
}

// A List element to hold FlowReservationRequest objects.
type FlowReservationRequestList struct {
	XMLName                xml.Name                 `xml:"http://ieee.org/2030.5 FlowReservationRequestList"`
	FlowReservationRequest []FlowReservationRequest `xml:"FlowReservationRequest,omitempty"`
	PollRate               uint                     `xml:"pollRate,attr,omitempty"`
	All                    uint                     `xml:"all,attr"`
	Results                byte                     `xml:"results,attr"`
	Href                   string                   `xml:"href,attr,omitempty"`
}

func (t *FlowReservationRequestList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FlowReservationRequestList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of FlowReservationRequest instances.
type FlowReservationRequestListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FlowReservationRequestListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// The server may modify the charging or discharging parameters and interval to provide a lower aggregated demand at the premises, or within a larger part of the distribution system.
type FlowReservationResponse struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 FlowReservationResponse"`
	MRID             HexBinary128     `xml:"mRID"`
	Description      String32         `xml:"description,omitempty"`
	Version          uint             `xml:"version,omitempty"`
	CreationTime     int64            `xml:"creationTime"`
	EventStatus      EventStatus      `xml:"EventStatus"`
	Interval         DateTimeInterval `xml:"interval"`
	EnergyAvailable  SignedRealEnergy `xml:"energyAvailable"`
	PowerAvailable   ActivePower      `xml:"powerAvailable"`
	Subject          HexBinary128     `xml:"subject"`
	Subscribable     byte             `xml:"subscribable,attr,omitempty"`
	ReplyTo          string           `xml:"replyTo,attr,omitempty"`
	ResponseRequired HexBinary8       `xml:"responseRequired,attr,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

func (t *FlowReservationResponse) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FlowReservationResponse
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// A List element to hold FlowReservationResponse objects.
type FlowReservationResponseList struct {
	XMLName                 xml.Name                  `xml:"http://ieee.org/2030.5 FlowReservationResponseList"`
	FlowReservationResponse []FlowReservationResponse `xml:"FlowReservationResponse,omitempty"`
	PollRate                uint                      `xml:"pollRate,attr,omitempty"`
	All                     uint                      `xml:"all,attr"`
	Results                 byte                      `xml:"results,attr"`
	Subscribable            byte                      `xml:"subscribable,attr,omitempty"`
	Href                    string                    `xml:"href,attr,omitempty"`
}

func (t *FlowReservationResponseList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FlowReservationResponseList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of FlowReservationResponse instances.
type FlowReservationResponseListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FlowReservationResponseListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A response to a FlowReservationResponse
type FlowReservationResponseResponse struct {
	XMLName         xml.Name     `xml:"http://ieee.org/2030.5 FlowReservationResponseResponse"`
	CreatedDateTime int64        `xml:"createdDateTime,omitempty"`
	EndDeviceLFDI   HexBinary160 `xml:"endDeviceLFDI"`
	Status          byte         `xml:"status,omitempty"`
	Subject         HexBinary128 `xml:"subject"`
	Href            string       `xml:"href,attr,omitempty"`
}

// Type for Frequency-Droop (Frequency-Watt) operation.
type FreqDroopType struct {
	XMLName     xml.Name `xml:"http://ieee.org/2030.5 FreqDroopType"`
	DBOF        uint     `xml:"dBOF"`
	DBUF        uint     `xml:"dBUF"`
	KOF         uint     `xml:"kOF"`
	KUF         uint     `xml:"kUF"`
	OpenLoopTms uint     `xml:"openLoopTms"`
}

// Provides an identifiable, subscribable collection of resources for a particular device to consume.
type FunctionSetAssignments struct {
	XMLName                       xml.Name                      `xml:"http://ieee.org/2030.5 FunctionSetAssignments"`
	CustomerAccountListLink       CustomerAccountListLink       `xml:"CustomerAccountListLink,omitempty"`
	DemandResponseProgramListLink DemandResponseProgramListLink `xml:"DemandResponseProgramListLink,omitempty"`
	DERProgramListLink            DERProgramListLink            `xml:"DERProgramListLink,omitempty"`
	FileListLink                  FileListLink                  `xml:"FileListLink,omitempty"`
	MessagingProgramListLink      MessagingProgramListLink      `xml:"MessagingProgramListLink,omitempty"`
	PrepaymentListLink            PrepaymentListLink            `xml:"PrepaymentListLink,omitempty"`
	ResponseSetListLink           ResponseSetListLink           `xml:"ResponseSetListLink,omitempty"`
	TariffProfileListLink         TariffProfileListLink         `xml:"TariffProfileListLink,omitempty"`
	TimeLink                      TimeLink                      `xml:"TimeLink,omitempty"`
	UsagePointListLink            UsagePointListLink            `xml:"UsagePointListLink,omitempty"`
	MRID                          HexBinary128                  `xml:"mRID"`
	Description                   String32                      `xml:"description,omitempty"`
	Version                       uint                          `xml:"version,omitempty"`
	Subscribable                  byte                          `xml:"subscribable,attr,omitempty"`
	Href                          string                        `xml:"href,attr,omitempty"`
}

func (t *FunctionSetAssignments) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FunctionSetAssignments
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// Defines a collection of function set instances that are to be used by one or more devices as indicated by the EndDevice object(s) of the server.
type FunctionSetAssignmentsBase struct {
	XMLName                       xml.Name                      `xml:"http://ieee.org/2030.5 FunctionSetAssignmentsBase"`
	CustomerAccountListLink       CustomerAccountListLink       `xml:"CustomerAccountListLink,omitempty"`
	DemandResponseProgramListLink DemandResponseProgramListLink `xml:"DemandResponseProgramListLink,omitempty"`
	DERProgramListLink            DERProgramListLink            `xml:"DERProgramListLink,omitempty"`
	FileListLink                  FileListLink                  `xml:"FileListLink,omitempty"`
	MessagingProgramListLink      MessagingProgramListLink      `xml:"MessagingProgramListLink,omitempty"`
	PrepaymentListLink            PrepaymentListLink            `xml:"PrepaymentListLink,omitempty"`
	ResponseSetListLink           ResponseSetListLink           `xml:"ResponseSetListLink,omitempty"`
	TariffProfileListLink         TariffProfileListLink         `xml:"TariffProfileListLink,omitempty"`
	TimeLink                      TimeLink                      `xml:"TimeLink,omitempty"`
	UsagePointListLink            UsagePointListLink            `xml:"UsagePointListLink,omitempty"`
	Href                          string                        `xml:"href,attr,omitempty"`
}

// A List element to hold FunctionSetAssignments objects.
type FunctionSetAssignmentsList struct {
	XMLName                xml.Name                 `xml:"http://ieee.org/2030.5 FunctionSetAssignmentsList"`
	FunctionSetAssignments []FunctionSetAssignments `xml:"FunctionSetAssignments,omitempty"`
	PollRate               uint                     `xml:"pollRate,attr,omitempty"`
	All                    uint                     `xml:"all,attr"`
	Results                byte                     `xml:"results,attr"`
	Subscribable           byte                     `xml:"subscribable,attr,omitempty"`
	Href                   string                   `xml:"href,attr,omitempty"`
}

func (t *FunctionSetAssignmentsList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FunctionSetAssignmentsList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of FunctionSetAssignments instances.
type FunctionSetAssignmentsListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 FunctionSetAssignmentsListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A 128-bit field encoded as a hex string (32 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary128 []byte

func (t *HexBinary128) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary128) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// A 16-bit field encoded as a hex string (4 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary16 []byte

func (t *HexBinary16) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary16) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// A 160-bit field encoded as a hex string (40 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary160 []byte

func (t *HexBinary160) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary160) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// A 32-bit field encoded as a hex string (8 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary32 []byte

func (t *HexBinary32) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary32) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// A 48-bit field encoded as a hex string (12 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary48 []byte

func (t *HexBinary48) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary48) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// A 64-bit field encoded as a hex string (16 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary64 []byte

func (t *HexBinary64) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary64) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// An 8-bit field encoded as a hex string (2 hex characters). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary8 []byte

func (t *HexBinary8) UnmarshalText(text []byte) error {
	return (*xsdHexBinary)(t).UnmarshalText(text)
}
func (t HexBinary8) MarshalText() ([]byte, error) {
	return xsdHexBinary(t).MarshalText()
}

// To be used to present readings that have been processed and possibly corrected (as allowed, due to missing or incorrect data) by backend systems. This includes quality codes valid, verified, estimated, and derived / corrected.
type HistoricalReading struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 HistoricalReading"`
	MRID                      HexBinary128              `xml:"mRID"`
	Description               String32                  `xml:"description,omitempty"`
	Version                   uint                      `xml:"version,omitempty"`
	BillingReadingSetListLink BillingReadingSetListLink `xml:"BillingReadingSetListLink,omitempty"`
	ReadingTypeLink           ReadingTypeLink           `xml:"ReadingTypeLink,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

// A List element to hold HistoricalReading objects.
type HistoricalReadingList struct {
	XMLName           xml.Name            `xml:"http://ieee.org/2030.5 HistoricalReadingList"`
	HistoricalReading []HistoricalReading `xml:"HistoricalReading,omitempty"`
	All               uint                `xml:"all,attr"`
	Results           byte                `xml:"results,attr"`
	Href              string              `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of HistoricalReading instances.
type HistoricalReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 HistoricalReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Contains 802.15.4 link layer specific attributes.
type IEEE802154 struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 IEEE_802_15_4"`
	CapabilityInfo   HexBinary8       `xml:"capabilityInfo"`
	NeighborListLink NeighborListLink `xml:"NeighborListLink,omitempty"`
	ShortAddress     uint             `xml:"shortAddress"`
}

// An Internet Protocol address object.
type IPAddr struct {
	XMLName             xml.Name            `xml:"http://ieee.org/2030.5 IPAddr"`
	Address             HexBinary128        `xml:"address"`
	RPLInstanceListLink RPLInstanceListLink `xml:"RPLInstanceListLink,omitempty"`
	Href                string              `xml:"href,attr,omitempty"`
}

// List of IPAddr instances.
type IPAddrList struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 IPAddrList"`
	IPAddr  []IPAddr `xml:"IPAddr,omitempty"`
	All     uint     `xml:"all,attr"`
	Results byte     `xml:"results,attr"`
	Href    string   `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of IPAddr instances.
type IPAddrListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 IPAddrListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Specific IPInterface resource.  This resource may be thought of as network status information for a specific network (IP) layer interface.
type IPInterface struct {
	XMLName             xml.Name            `xml:"http://ieee.org/2030.5 IPInterface"`
	IfDescr             String192           `xml:"ifDescr,omitempty"`
	IfHighSpeed         uint                `xml:"ifHighSpeed,omitempty"`
	IfInBroadcastPkts   uint                `xml:"ifInBroadcastPkts,omitempty"`
	IfIndex             uint                `xml:"ifIndex,omitempty"`
	IfInDiscards        uint                `xml:"ifInDiscards,omitempty"`
	IfInErrors          uint                `xml:"ifInErrors,omitempty"`
	IfInMulticastPkts   uint                `xml:"ifInMulticastPkts,omitempty"`
	IfInOctets          uint                `xml:"ifInOctets,omitempty"`
	IfInUcastPkts       uint                `xml:"ifInUcastPkts,omitempty"`
	IfInUnknownProtos   uint                `xml:"ifInUnknownProtos,omitempty"`
	IfMtu               uint                `xml:"ifMtu,omitempty"`
	IfName              String16            `xml:"ifName,omitempty"`
	IfOperStatus        byte                `xml:"ifOperStatus,omitempty"`
	IfOutBroadcastPkts  uint                `xml:"ifOutBroadcastPkts,omitempty"`
	IfOutDiscards       uint                `xml:"ifOutDiscards,omitempty"`
	IfOutErrors         uint                `xml:"ifOutErrors,omitempty"`
	IfOutMulticastPkts  uint                `xml:"ifOutMulticastPkts,omitempty"`
	IfOutOctets         uint                `xml:"ifOutOctets,omitempty"`
	IfOutUcastPkts      uint                `xml:"ifOutUcastPkts,omitempty"`
	IfPromiscuousMode   bool                `xml:"ifPromiscuousMode,omitempty"`
	IfSpeed             uint                `xml:"ifSpeed,omitempty"`
	IfType              uint                `xml:"ifType,omitempty"`
	IPAddrListLink      IPAddrListLink      `xml:"IPAddrListLink,omitempty"`
	LastResetTime       int64               `xml:"lastResetTime,omitempty"`
	LastUpdatedTime     int64               `xml:"lastUpdatedTime,omitempty"`
	LLInterfaceListLink LLInterfaceListLink `xml:"LLInterfaceListLink,omitempty"`
	Href                string              `xml:"href,attr,omitempty"`
}

// List of IPInterface instances.
type IPInterfaceList struct {
	XMLName     xml.Name      `xml:"http://ieee.org/2030.5 IPInterfaceList"`
	IPInterface []IPInterface `xml:"IPInterface,omitempty"`
	PollRate    uint          `xml:"pollRate,attr,omitempty"`
	All         uint          `xml:"all,attr"`
	Results     byte          `xml:"results,attr"`
	Href        string        `xml:"href,attr,omitempty"`
}

func (t *IPInterfaceList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T IPInterfaceList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of IPInterface instances.
type IPInterfaceListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 IPInterfaceListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// This is a root class to provide common naming attributes for all classes needing naming attributes
type IdentifiedObject struct {
	XMLName     xml.Name     `xml:"http://ieee.org/2030.5 IdentifiedObject"`
	MRID        HexBinary128 `xml:"mRID"`
	Description String32     `xml:"description,omitempty"`
	Version     uint         `xml:"version,omitempty"`
	Href        string       `xml:"href,attr,omitempty"`
}

// DER InverterStatus value:
// 0 - N/A
// 1 - off
// 2 - sleeping (auto-shutdown) or DER is at low output power/voltage
// 3 - starting up or ON but not producing power
// 4 - tracking MPPT power point
// 5 - forced power reduction/derating
// 6 - shutting down
// 7 - one or more faults exist
// 8 - standby (service on unit) - DER may be at high output voltage/power
// 9 - test mode
// 10 - as defined in manufacturer status
// All other values reserved.
type InverterStatusType struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 InverterStatusType"`
	DateTime int64    `xml:"dateTime"`
	Value    byte     `xml:"value"`
}

// A link-layer interface object.
type LLInterface struct {
	XMLName           xml.Name    `xml:"http://ieee.org/2030.5 LLInterface"`
	CRCerrors         uint        `xml:"CRCerrors"`
	EUI64             HexBinary64 `xml:"EUI64"`
	IEEE802154        IEEE802154  `xml:"IEEE_802_15_4,omitempty"`
	LinkLayerType     byte        `xml:"linkLayerType"`
	LLAckNotRx        uint        `xml:"LLAckNotRx,omitempty"`
	LLCSMAFail        uint        `xml:"LLCSMAFail,omitempty"`
	LLFramesDropRx    uint        `xml:"LLFramesDropRx,omitempty"`
	LLFramesDropTx    uint        `xml:"LLFramesDropTx,omitempty"`
	LLFramesRx        uint        `xml:"LLFramesRx,omitempty"`
	LLFramesTx        uint        `xml:"LLFramesTx,omitempty"`
	LLMediaAccessFail uint        `xml:"LLMediaAccessFail,omitempty"`
	LLOctetsRx        uint        `xml:"LLOctetsRx,omitempty"`
	LLOctetsTx        uint        `xml:"LLOctetsTx,omitempty"`
	LLRetryCount      uint        `xml:"LLRetryCount,omitempty"`
	LLSecurityErrorRx uint        `xml:"LLSecurityErrorRx,omitempty"`
	LoWPAN            LoWPAN      `xml:"loWPAN,omitempty"`
	Href              string      `xml:"href,attr,omitempty"`
}

// List of LLInterface instances.
type LLInterfaceList struct {
	XMLName     xml.Name      `xml:"http://ieee.org/2030.5 LLInterfaceList"`
	LLInterface []LLInterface `xml:"LLInterface,omitempty"`
	All         uint          `xml:"all,attr"`
	Results     byte          `xml:"results,attr"`
	Href        string        `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of LLInterface instances.
type LLInterfaceListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 LLInterfaceListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Links provide a reference, via URI, to another resource.
type Link struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 Link"`
	Href    string   `xml:"href,attr"`
}

// Container to hold a collection of object instances or references. See [ZB 11-0167] Design Patterns section for additional details.
type List struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 List"`
	All     uint     `xml:"all,attr"`
	Results byte     `xml:"results,attr"`
	Href    string   `xml:"href,attr,omitempty"`
}

// ListLinks provide a reference, via URI, to a List.
type ListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Contains information specific to 6LoWPAN.
type LoWPAN struct {
	XMLName     xml.Name `xml:"http://ieee.org/2030.5 loWPAN"`
	OctetsRx    uint     `xml:"octetsRx,omitempty"`
	OctetsTx    uint     `xml:"octetsTx,omitempty"`
	PacketsRx   uint     `xml:"packetsRx"`
	PacketsTx   uint     `xml:"packetsTx"`
	RxFragError uint     `xml:"rxFragError"`
}

// Indicates current consumption status and ability to shed load.
type LoadShedAvailability struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 LoadShedAvailability"`
	AvailabilityDuration      uint                      `xml:"availabilityDuration,omitempty"`
	DemandResponseProgramLink DemandResponseProgramLink `xml:"DemandResponseProgramLink,omitempty"`
	SheddablePercent          uint                      `xml:"sheddablePercent,omitempty"`
	SheddablePower            ActivePower               `xml:"sheddablePower,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

// A List element to hold LoadShedAvailability objects.
type LoadShedAvailabilityList struct {
	XMLName              xml.Name               `xml:"http://ieee.org/2030.5 LoadShedAvailabilityList"`
	LoadShedAvailability []LoadShedAvailability `xml:"LoadShedAvailability,omitempty"`
	PollRate             uint                   `xml:"pollRate,attr,omitempty"`
	All                  uint                   `xml:"all,attr"`
	Results              byte                   `xml:"results,attr"`
	Href                 string                 `xml:"href,attr,omitempty"`
}

func (t *LoadShedAvailabilityList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LoadShedAvailabilityList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of LoadShedAvailability instances.
type LoadShedAvailabilityListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 LoadShedAvailabilityListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// DER LocalControlModeStatus/value:
// 0 – local control
// 1 – remote control
// All other values reserved.
type LocalControlModeStatusType struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 LocalControlModeStatusType"`
	DateTime int64    `xml:"dateTime"`
	Value    byte     `xml:"value"`
}

// A time stamped instance of a significant event detected by the device.
type LogEvent struct {
	XMLName         xml.Name `xml:"http://ieee.org/2030.5 LogEvent"`
	CreatedDateTime int64    `xml:"createdDateTime"`
	Details         String32 `xml:"details,omitempty"`
	ExtendedData    uint     `xml:"extendedData,omitempty"`
	FunctionSet     byte     `xml:"functionSet"`
	LogEventCode    byte     `xml:"logEventCode"`
	LogEventID      uint     `xml:"logEventID"`
	LogEventPEN     uint     `xml:"logEventPEN"`
	ProfileID       byte     `xml:"profileID"`
	Href            string   `xml:"href,attr,omitempty"`
}

// A List element to hold LogEvent objects.
type LogEventList struct {
	XMLName      xml.Name   `xml:"http://ieee.org/2030.5 LogEventList"`
	LogEvent     []LogEvent `xml:"LogEvent,omitempty"`
	PollRate     uint       `xml:"pollRate,attr,omitempty"`
	All          uint       `xml:"all,attr"`
	Results      byte       `xml:"results,attr"`
	Subscribable byte       `xml:"subscribable,attr,omitempty"`
	Href         string     `xml:"href,attr,omitempty"`
}

func (t *LogEventList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LogEventList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of LogEvent instances.
type LogEventListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 LogEventListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// DER ManufacturerStatus/value: String data type
type ManufacturerStatusType struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 ManufacturerStatusType"`
	DateTime int64    `xml:"dateTime"`
	Value    String6  `xml:"value"`
}

// Provides a container for collections of text messages.
type MessagingProgram struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 MessagingProgram"`
	MRID                      HexBinary128              `xml:"mRID"`
	Description               String32                  `xml:"description,omitempty"`
	Version                   uint                      `xml:"version,omitempty"`
	ActiveTextMessageListLink ActiveTextMessageListLink `xml:"ActiveTextMessageListLink,omitempty"`
	Locale                    String42                  `xml:"locale"`
	Primacy                   byte                      `xml:"primacy"`
	TextMessageListLink       TextMessageListLink       `xml:"TextMessageListLink,omitempty"`
	Subscribable              byte                      `xml:"subscribable,attr,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

func (t *MessagingProgram) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MessagingProgram
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// A List element to hold MessagingProgram objects.
type MessagingProgramList struct {
	XMLName          xml.Name           `xml:"http://ieee.org/2030.5 MessagingProgramList"`
	MessagingProgram []MessagingProgram `xml:"MessagingProgram,omitempty"`
	PollRate         uint               `xml:"pollRate,attr,omitempty"`
	All              uint               `xml:"all,attr"`
	Results          byte               `xml:"results,attr"`
	Subscribable     byte               `xml:"subscribable,attr,omitempty"`
	Href             string             `xml:"href,attr,omitempty"`
}

func (t *MessagingProgramList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MessagingProgramList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of MessagingProgram instances.
type MessagingProgramListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 MessagingProgramListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Set of values obtained from the meter.
type MeterReading struct {
	XMLName               xml.Name              `xml:"http://ieee.org/2030.5 MeterReading"`
	MRID                  HexBinary128          `xml:"mRID"`
	Description           String32              `xml:"description,omitempty"`
	Version               uint                  `xml:"version,omitempty"`
	RateComponentListLink RateComponentListLink `xml:"RateComponentListLink,omitempty"`
	ReadingLink           ReadingLink           `xml:"ReadingLink,omitempty"`
	ReadingSetListLink    ReadingSetListLink    `xml:"ReadingSetListLink,omitempty"`
	ReadingTypeLink       ReadingTypeLink       `xml:"ReadingTypeLink"`
	Href                  string                `xml:"href,attr,omitempty"`
}

// A container for associating ReadingType, Readings and ReadingSets.
type MeterReadingBase struct {
	XMLName     xml.Name     `xml:"http://ieee.org/2030.5 MeterReadingBase"`
	MRID        HexBinary128 `xml:"mRID"`
	Description String32     `xml:"description,omitempty"`
	Version     uint         `xml:"version,omitempty"`
	Href        string       `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of MeterReading.
type MeterReadingLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 MeterReadingLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold MeterReading objects.
type MeterReadingList struct {
	XMLName      xml.Name       `xml:"http://ieee.org/2030.5 MeterReadingList"`
	MeterReading []MeterReading `xml:"MeterReading,omitempty"`
	All          uint           `xml:"all,attr"`
	Results      byte           `xml:"results,attr"`
	Subscribable byte           `xml:"subscribable,attr,omitempty"`
	Href         string         `xml:"href,attr,omitempty"`
}

func (t *MeterReadingList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MeterReadingList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of MeterReading instances.
type MeterReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 MeterReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Mimic of MeterReading used for managing mirrors.
type MirrorMeterReading struct {
	XMLName          xml.Name           `xml:"http://ieee.org/2030.5 MirrorMeterReading"`
	MRID             HexBinary128       `xml:"mRID"`
	Description      String32           `xml:"description,omitempty"`
	Version          uint               `xml:"version,omitempty"`
	LastUpdateTime   int64              `xml:"lastUpdateTime,omitempty"`
	MirrorReadingSet []MirrorReadingSet `xml:"MirrorReadingSet,omitempty"`
	NextUpdateTime   int64              `xml:"nextUpdateTime,omitempty"`
	Reading          Reading            `xml:"Reading,omitempty"`
	ReadingType      ReadingType        `xml:"ReadingType,omitempty"`
	Href             string             `xml:"href,attr,omitempty"`
}

// A List of MirrorMeterReading instances.
type MirrorMeterReadingList struct {
	XMLName            xml.Name             `xml:"http://ieee.org/2030.5 MirrorMeterReadingList"`
	MirrorMeterReading []MirrorMeterReading `xml:"MirrorMeterReading,omitempty"`
	All                uint                 `xml:"all,attr"`
	Results            byte                 `xml:"results,attr"`
	Href               string               `xml:"href,attr,omitempty"`
}

// A set of Readings of the ReadingType indicated by the parent MeterReading.
type MirrorReadingSet struct {
	XMLName     xml.Name         `xml:"http://ieee.org/2030.5 MirrorReadingSet"`
	MRID        HexBinary128     `xml:"mRID"`
	Description String32         `xml:"description,omitempty"`
	Version     uint             `xml:"version,omitempty"`
	TimePeriod  DateTimeInterval `xml:"timePeriod"`
	Reading     []Reading        `xml:"Reading,omitempty"`
	Href        string           `xml:"href,attr,omitempty"`
}

// A parallel to UsagePoint to support mirroring
type MirrorUsagePoint struct {
	XMLName             xml.Name             `xml:"http://ieee.org/2030.5 MirrorUsagePoint"`
	MRID                HexBinary128         `xml:"mRID"`
	Description         String32             `xml:"description,omitempty"`
	Version             uint                 `xml:"version,omitempty"`
	RoleFlags           HexBinary16          `xml:"roleFlags"`
	ServiceCategoryKind byte                 `xml:"serviceCategoryKind"`
	Status              byte                 `xml:"status"`
	DeviceLFDI          HexBinary160         `xml:"deviceLFDI"`
	MirrorMeterReading  []MirrorMeterReading `xml:"MirrorMeterReading,omitempty"`
	PostRate            uint                 `xml:"postRate,omitempty"`
	Href                string               `xml:"href,attr,omitempty"`
}

// A List of MirrorUsagePoint instances.
type MirrorUsagePointList struct {
	XMLName          xml.Name           `xml:"http://ieee.org/2030.5 MirrorUsagePointList"`
	MirrorUsagePoint []MirrorUsagePoint `xml:"MirrorUsagePoint,omitempty"`
	PollRate         uint               `xml:"pollRate,attr,omitempty"`
	All              uint               `xml:"all,attr"`
	Results          byte               `xml:"results,attr"`
	Href             string             `xml:"href,attr,omitempty"`
}

func (t *MirrorUsagePointList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MirrorUsagePointList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of MirrorUsagePoint instances.
type MirrorUsagePointListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 MirrorUsagePointListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Contains 802.15.4 link layer specific attributes.
type Neighbor struct {
	XMLName      xml.Name `xml:"http://ieee.org/2030.5 Neighbor"`
	IsChild      bool     `xml:"isChild"`
	LinkQuality  byte     `xml:"linkQuality"`
	ShortAddress uint     `xml:"shortAddress"`
	Href         string   `xml:"href,attr,omitempty"`
}

// List of 15.4 neighbors.
type NeighborList struct {
	XMLName  xml.Name   `xml:"http://ieee.org/2030.5 NeighborList"`
	Neighbor []Neighbor `xml:"Neighbor,omitempty"`
	All      uint       `xml:"all,attr"`
	Results  byte       `xml:"results,attr"`
	Href     string     `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of Neighbor instances.
type NeighborListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 NeighborListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Holds the information related to a client subscription to receive updates to a resource automatically. The actual resources may be passed in the Notification by specifying a specific xsi:type for the Resource and passing the full representation.
type Notification struct {
	XMLName            xml.Name `xml:"http://ieee.org/2030.5 Notification"`
	SubscribedResource string   `xml:"subscribedResource"`
	NewResourceURI     string   `xml:"newResourceURI,omitempty"`
	Resource           Resource `xml:"Resource,omitempty"`
	Status             byte     `xml:"status"`
	SubscriptionURI    string   `xml:"subscriptionURI"`
	Href               string   `xml:"href,attr,omitempty"`
}

// A List element to hold Notification objects.
type NotificationList struct {
	XMLName      xml.Name       `xml:"http://ieee.org/2030.5 NotificationList"`
	Notification []Notification `xml:"Notification,omitempty"`
	All          uint           `xml:"all,attr"`
	Results      byte           `xml:"results,attr"`
	Href         string         `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of Notification instances.
type NotificationListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 NotificationListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// If a temperature offset is sent that causes the heating or cooling temperature set point to exceed the limit boundaries that are programmed into the device, the device SHALL respond by setting the temperature at the limit.
// If an EDC is being targeted at multiple devices or to a device that controls multiple devices (e.g., EMS), it can provide multiple Offset types within one EDC. For events with multiple Offset types, a client SHALL select the Offset that best fits their operating function.
// Alternatively, an event with a single Offset type can be targeted at an EMS in order to request a percentage load reduction on the average energy usage of the entire premise. An EMS SHOULD use the Metering function set to determine the initial load in the premise, reduce energy consumption by controlling devices at its disposal, and at the conclusion of the event, once again use the Metering function set to determine if the desired load reduction was achieved.
type Offset struct {
	XMLName                        xml.Name `xml:"http://ieee.org/2030.5 Offset"`
	CoolingOffset                  byte     `xml:"coolingOffset,omitempty"`
	HeatingOffset                  byte     `xml:"heatingOffset,omitempty"`
	LoadAdjustmentPercentageOffset uint     `xml:"loadAdjustmentPercentageOffset,omitempty"`
}

// DER OperationalModeStatus value:
// 0 - Not applicable / Unknown
// 1 - Off
// 2 - Operational mode
// 3 - Test mode
// All other values reserved.
type OperationalModeStatusType struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 OperationalModeStatusType"`
	DateTime int64    `xml:"dateTime"`
	Value    byte     `xml:"value"`
}

// Contains attributes that can be exposed by PEVs and other devices that have charging requirements.
type PEVInfo struct {
	XMLName                 xml.Name    `xml:"http://ieee.org/2030.5 PEVInfo"`
	ChargingPowerNow        ActivePower `xml:"chargingPowerNow"`
	EnergyRequestNow        RealEnergy  `xml:"energyRequestNow"`
	MaxForwardPower         ActivePower `xml:"maxForwardPower"`
	MinimumChargingDuration uint        `xml:"minimumChargingDuration"`
	TargetStateOfCharge     uint        `xml:"targetStateOfCharge"`
	TimeChargeIsNeeded      int64       `xml:"timeChargeIsNeeded"`
	TimeChargingStatusPEV   int64       `xml:"timeChargingStatusPEV"`
}

// Contains configuration related to the device's power sources
type PowerConfiguration struct {
	XMLName            xml.Name `xml:"http://ieee.org/2030.5 PowerConfiguration"`
	BatteryInstallTime int64    `xml:"batteryInstallTime,omitempty"`
	LowChargeThreshold uint     `xml:"lowChargeThreshold,omitempty"`
}

// Specifies a setpoint for Displacement Power Factor, the ratio between apparent and active powers at the fundamental frequency (e.g. 60 Hz).
type PowerFactor struct {
	XMLName      xml.Name `xml:"http://ieee.org/2030.5 PowerFactor"`
	Displacement int      `xml:"displacement"`
	Multiplier   byte     `xml:"multiplier"`
}

// Contains the status of the device's power sources
type PowerStatus struct {
	XMLName                  xml.Name `xml:"http://ieee.org/2030.5 PowerStatus"`
	BatteryStatus            byte     `xml:"batteryStatus"`
	ChangedTime              int64    `xml:"changedTime"`
	CurrentPowerSource       byte     `xml:"currentPowerSource"`
	EstimatedChargeRemaining uint     `xml:"estimatedChargeRemaining,omitempty"`
	EstimatedTimeRemaining   uint     `xml:"estimatedTimeRemaining,omitempty"`
	PEVInfo                  PEVInfo  `xml:"PEVInfo,omitempty"`
	SessionTimeOnBattery     uint     `xml:"sessionTimeOnBattery,omitempty"`
	TotalTimeOnBattery       uint     `xml:"totalTimeOnBattery,omitempty"`
	PollRate                 uint     `xml:"pollRate,attr,omitempty"`
	Href                     string   `xml:"href,attr,omitempty"`
}

func (t *PowerStatus) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PowerStatus
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of PowerStatus.
type PowerStatusLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 PowerStatusLink"`
	Href    string   `xml:"href,attr"`
}

// PrepayOperationStatus describes the status of the service or commodity being conditionally controlled by the Prepayment function set.
type PrepayOperationStatus struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 PrepayOperationStatus"`
	CreditTypeChange CreditTypeChange `xml:"creditTypeChange,omitempty"`
	CreditTypeInUse  byte             `xml:"creditTypeInUse,omitempty"`
	ServiceChange    ServiceChange    `xml:"serviceChange,omitempty"`
	ServiceStatus    byte             `xml:"serviceStatus"`
	Href             string           `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of PrepayOperationStatus.
type PrepayOperationStatusLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 PrepayOperationStatusLink"`
	Href    string   `xml:"href,attr"`
}

// Prepayment (inherited from CIM SDPAccountingFunction)
type Prepayment struct {
	XMLName                                  xml.Name                                 `xml:"http://ieee.org/2030.5 Prepayment"`
	MRID                                     HexBinary128                             `xml:"mRID"`
	Description                              String32                                 `xml:"description,omitempty"`
	Version                                  uint                                     `xml:"version,omitempty"`
	AccountBalanceLink                       AccountBalanceLink                       `xml:"AccountBalanceLink"`
	ActiveCreditRegisterListLink             ActiveCreditRegisterListLink             `xml:"ActiveCreditRegisterListLink,omitempty"`
	ActiveSupplyInterruptionOverrideListLink ActiveSupplyInterruptionOverrideListLink `xml:"ActiveSupplyInterruptionOverrideListLink,omitempty"`
	CreditExpiryLevel                        AccountingUnit                           `xml:"creditExpiryLevel,omitempty"`
	CreditRegisterListLink                   CreditRegisterListLink                   `xml:"CreditRegisterListLink"`
	LowCreditWarningLevel                    AccountingUnit                           `xml:"lowCreditWarningLevel,omitempty"`
	LowEmergencyCreditWarningLevel           AccountingUnit                           `xml:"lowEmergencyCreditWarningLevel,omitempty"`
	PrepayMode                               byte                                     `xml:"prepayMode"`
	PrepayOperationStatusLink                PrepayOperationStatusLink                `xml:"PrepayOperationStatusLink"`
	SupplyInterruptionOverrideListLink       SupplyInterruptionOverrideListLink       `xml:"SupplyInterruptionOverrideListLink"`
	UsagePoint                               []UsagePoint                             `xml:"UsagePoint,omitempty"`
	UsagePointLink                           UsagePointLink                           `xml:"UsagePointLink,omitempty"`
	Href                                     string                                   `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of Prepayment.
type PrepaymentLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 PrepaymentLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold Prepayment objects.
type PrepaymentList struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 PrepaymentList"`
	Prepayment   []Prepayment `xml:"Prepayment,omitempty"`
	PollRate     uint         `xml:"pollRate,attr,omitempty"`
	All          uint         `xml:"all,attr"`
	Results      byte         `xml:"results,attr"`
	Subscribable byte         `xml:"subscribable,attr,omitempty"`
	Href         string       `xml:"href,attr,omitempty"`
}

func (t *PrepaymentList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PrepaymentList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of Prepayment instances.
type PrepaymentListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 PrepaymentListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A response related to a price message.
type PriceResponse struct {
	XMLName         xml.Name     `xml:"http://ieee.org/2030.5 PriceResponse"`
	CreatedDateTime int64        `xml:"createdDateTime,omitempty"`
	EndDeviceLFDI   HexBinary160 `xml:"endDeviceLFDI"`
	Status          byte         `xml:"status,omitempty"`
	Subject         HexBinary128 `xml:"subject"`
	Href            string       `xml:"href,attr,omitempty"`
}

// Configuration data that specifies how price responsive devices SHOULD respond to price changes while acting upon a given RateComponent.
type PriceResponseCfg struct {
	XMLName               xml.Name          `xml:"http://ieee.org/2030.5 PriceResponseCfg"`
	ConsumeThreshold      int               `xml:"consumeThreshold"`
	MaxReductionThreshold int               `xml:"maxReductionThreshold"`
	RateComponentLink     RateComponentLink `xml:"RateComponentLink"`
	Href                  string            `xml:"href,attr,omitempty"`
}

// A List element to hold PriceResponseCfg objects.
type PriceResponseCfgList struct {
	XMLName          xml.Name           `xml:"http://ieee.org/2030.5 PriceResponseCfgList"`
	PriceResponseCfg []PriceResponseCfg `xml:"PriceResponseCfg,omitempty"`
	All              uint               `xml:"all,attr"`
	Results          byte               `xml:"results,attr"`
	Href             string             `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of PriceResponseCfg instances.
type PriceResponseCfgListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 PriceResponseCfgListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Contains values that forecast a future reading for the time or interval specified.
type ProjectionReading struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 ProjectionReading"`
	MRID                      HexBinary128              `xml:"mRID"`
	Description               String32                  `xml:"description,omitempty"`
	Version                   uint                      `xml:"version,omitempty"`
	BillingReadingSetListLink BillingReadingSetListLink `xml:"BillingReadingSetListLink,omitempty"`
	ReadingTypeLink           ReadingTypeLink           `xml:"ReadingTypeLink,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

// A List element to hold ProjectionReading objects.
type ProjectionReadingList struct {
	XMLName           xml.Name            `xml:"http://ieee.org/2030.5 ProjectionReadingList"`
	ProjectionReading []ProjectionReading `xml:"ProjectionReading,omitempty"`
	All               uint                `xml:"all,attr"`
	Results           byte                `xml:"results,attr"`
	Href              string              `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of ProjectionReading instances.
type ProjectionReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ProjectionReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Specific RPLInstance resource.  This resource may be thought of as network status information for a specific RPL instance associated with IPInterface.
type RPLInstance struct {
	XMLName                 xml.Name                `xml:"http://ieee.org/2030.5 RPLInstance"`
	DODAGid                 byte                    `xml:"DODAGid"`
	DODAGroot               bool                    `xml:"DODAGroot"`
	Flags                   byte                    `xml:"flags"`
	GroundedFlag            bool                    `xml:"groundedFlag"`
	MOP                     byte                    `xml:"MOP"`
	PRF                     byte                    `xml:"PRF"`
	Rank                    uint                    `xml:"rank"`
	RPLInstanceID           byte                    `xml:"RPLInstanceID"`
	RPLSourceRoutesListLink RPLSourceRoutesListLink `xml:"RPLSourceRoutesListLink,omitempty"`
	VersionNumber           byte                    `xml:"versionNumber"`
	Href                    string                  `xml:"href,attr,omitempty"`
}

// List of RPLInstances associated with the IPinterface.
type RPLInstanceList struct {
	XMLName     xml.Name      `xml:"http://ieee.org/2030.5 RPLInstanceList"`
	RPLInstance []RPLInstance `xml:"RPLInstance,omitempty"`
	All         uint          `xml:"all,attr"`
	Results     byte          `xml:"results,attr"`
	Href        string        `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of RPLInterface instances.
type RPLInstanceListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 RPLInstanceListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A RPL source routes object.
type RPLSourceRoutes struct {
	XMLName     xml.Name     `xml:"http://ieee.org/2030.5 RPLSourceRoutes"`
	DestAddress HexBinary128 `xml:"DestAddress"`
	SourceRoute HexBinary128 `xml:"SourceRoute"`
	Href        string       `xml:"href,attr,omitempty"`
}

// List or RPL source routes if the hosting device is the DODAGroot
type RPLSourceRoutesList struct {
	XMLName         xml.Name          `xml:"http://ieee.org/2030.5 RPLSourceRoutesList"`
	RPLSourceRoutes []RPLSourceRoutes `xml:"RPLSourceRoutes,omitempty"`
	All             uint              `xml:"all,attr"`
	Results         byte              `xml:"results,attr"`
	Href            string            `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of RPLSourceRoutes instances.
type RPLSourceRoutesListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 RPLSourceRoutesListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// An Event that can indicate time ranges over which the start time and duration SHALL be randomized.
type RandomizableEvent struct {
	XMLName           xml.Name         `xml:"http://ieee.org/2030.5 RandomizableEvent"`
	MRID              HexBinary128     `xml:"mRID"`
	Description       String32         `xml:"description,omitempty"`
	Version           uint             `xml:"version,omitempty"`
	CreationTime      int64            `xml:"creationTime"`
	EventStatus       EventStatus      `xml:"EventStatus"`
	Interval          DateTimeInterval `xml:"interval"`
	RandomizeDuration int              `xml:"randomizeDuration,omitempty"`
	RandomizeStart    int              `xml:"randomizeStart,omitempty"`
	Subscribable      byte             `xml:"subscribable,attr,omitempty"`
	ReplyTo           string           `xml:"replyTo,attr,omitempty"`
	ResponseRequired  HexBinary8       `xml:"responseRequired,attr,omitempty"`
	Href              string           `xml:"href,attr,omitempty"`
}

func (t *RandomizableEvent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RandomizableEvent
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// Specifies the applicable charges for a single component of the rate, which could be generation price or consumption price, for example.
type RateComponent struct {
	XMLName                          xml.Name                         `xml:"http://ieee.org/2030.5 RateComponent"`
	MRID                             HexBinary128                     `xml:"mRID"`
	Description                      String32                         `xml:"description,omitempty"`
	Version                          uint                             `xml:"version,omitempty"`
	ActiveTimeTariffIntervalListLink ActiveTimeTariffIntervalListLink `xml:"ActiveTimeTariffIntervalListLink,omitempty"`
	FlowRateEndLimit                 UnitValueType                    `xml:"flowRateEndLimit,omitempty"`
	FlowRateStartLimit               UnitValueType                    `xml:"flowRateStartLimit,omitempty"`
	ReadingTypeLink                  ReadingTypeLink                  `xml:"ReadingTypeLink"`
	RoleFlags                        HexBinary16                      `xml:"roleFlags"`
	TimeTariffIntervalListLink       TimeTariffIntervalListLink       `xml:"TimeTariffIntervalListLink"`
	Href                             string                           `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of RateComponent.
type RateComponentLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 RateComponentLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold RateComponent objects.
type RateComponentList struct {
	XMLName       xml.Name        `xml:"http://ieee.org/2030.5 RateComponentList"`
	RateComponent []RateComponent `xml:"RateComponent,omitempty"`
	All           uint            `xml:"all,attr"`
	Results       byte            `xml:"results,attr"`
	Href          string          `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of RateComponent instances.
type RateComponentListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 RateComponentListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// The reactive power Q (in var) is the product of root mean square (RMS) voltage, RMS current, and sin(theta) where theta is the phase angle of current relative to voltage.
type ReactivePower struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 ReactivePower"`
	Multiplier byte     `xml:"multiplier"`
	Value      int      `xml:"value"`
}

// Specific value measured by a meter or other asset.
type Reading struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 Reading"`
	ConsumptionBlock byte             `xml:"consumptionBlock,omitempty"`
	QualityFlags     HexBinary16      `xml:"qualityFlags,omitempty"`
	TimePeriod       DateTimeInterval `xml:"timePeriod,omitempty"`
	TouTier          byte             `xml:"touTier,omitempty"`
	Value            int64            `xml:"value,omitempty"`
	LocalID          HexBinary16      `xml:"localID,omitempty"`
	Subscribable     byte             `xml:"subscribable,attr,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

func (t *Reading) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Reading
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// Specific value measured by a meter or other asset. ReadingBase is abstract, used to define the elements common to Reading and IntervalReading.
type ReadingBase struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 ReadingBase"`
	ConsumptionBlock byte             `xml:"consumptionBlock,omitempty"`
	QualityFlags     HexBinary16      `xml:"qualityFlags,omitempty"`
	TimePeriod       DateTimeInterval `xml:"timePeriod,omitempty"`
	TouTier          byte             `xml:"touTier,omitempty"`
	Value            int64            `xml:"value,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

// A Link to a Reading.
type ReadingLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ReadingLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold Reading objects.
type ReadingList struct {
	XMLName      xml.Name  `xml:"http://ieee.org/2030.5 ReadingList"`
	Reading      []Reading `xml:"Reading,omitempty"`
	All          uint      `xml:"all,attr"`
	Results      byte      `xml:"results,attr"`
	Subscribable byte      `xml:"subscribable,attr,omitempty"`
	Href         string    `xml:"href,attr,omitempty"`
}

func (t *ReadingList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReadingList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of Reading instances.
type ReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A set of Readings of the ReadingType indicated by the parent MeterReading.
type ReadingSet struct {
	XMLName         xml.Name         `xml:"http://ieee.org/2030.5 ReadingSet"`
	MRID            HexBinary128     `xml:"mRID"`
	Description     String32         `xml:"description,omitempty"`
	Version         uint             `xml:"version,omitempty"`
	TimePeriod      DateTimeInterval `xml:"timePeriod"`
	ReadingListLink ReadingListLink  `xml:"ReadingListLink,omitempty"`
	Href            string           `xml:"href,attr,omitempty"`
}

// A set of Readings of the ReadingType indicated by the parent MeterReading. ReadingBase is abstract, used to define the elements common to ReadingSet and IntervalBlock.
type ReadingSetBase struct {
	XMLName     xml.Name         `xml:"http://ieee.org/2030.5 ReadingSetBase"`
	MRID        HexBinary128     `xml:"mRID"`
	Description String32         `xml:"description,omitempty"`
	Version     uint             `xml:"version,omitempty"`
	TimePeriod  DateTimeInterval `xml:"timePeriod"`
	Href        string           `xml:"href,attr,omitempty"`
}

// A List element to hold ReadingSet objects.
type ReadingSetList struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 ReadingSetList"`
	ReadingSet   []ReadingSet `xml:"ReadingSet,omitempty"`
	All          uint         `xml:"all,attr"`
	Results      byte         `xml:"results,attr"`
	Subscribable byte         `xml:"subscribable,attr,omitempty"`
	Href         string       `xml:"href,attr,omitempty"`
}

func (t *ReadingSetList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReadingSetList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of ReadingSet instances.
type ReadingSetListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ReadingSetListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Type of data conveyed by a specific Reading. See IEC 61968 Part 9 Annex C for full definitions of these values.
type ReadingType struct {
	XMLName                   xml.Name      `xml:"http://ieee.org/2030.5 ReadingType"`
	AccumulationBehaviour     byte          `xml:"accumulationBehaviour,omitempty"`
	CalorificValue            UnitValueType `xml:"calorificValue,omitempty"`
	Commodity                 byte          `xml:"commodity,omitempty"`
	ConversionFactor          UnitValueType `xml:"conversionFactor,omitempty"`
	DataQualifier             byte          `xml:"dataQualifier,omitempty"`
	FlowDirection             byte          `xml:"flowDirection,omitempty"`
	IntervalLength            uint          `xml:"intervalLength,omitempty"`
	Kind                      byte          `xml:"kind,omitempty"`
	MaxNumberOfIntervals      byte          `xml:"maxNumberOfIntervals,omitempty"`
	NumberOfConsumptionBlocks byte          `xml:"numberOfConsumptionBlocks,omitempty"`
	NumberOfTouTiers          byte          `xml:"numberOfTouTiers,omitempty"`
	Phase                     byte          `xml:"phase,omitempty"`
	PowerOfTenMultiplier      byte          `xml:"powerOfTenMultiplier,omitempty"`
	SubIntervalLength         uint          `xml:"subIntervalLength,omitempty"`
	SupplyLimit               uint64        `xml:"supplyLimit,omitempty"`
	TieredConsumptionBlocks   bool          `xml:"tieredConsumptionBlocks,omitempty"`
	Uom                       byte          `xml:"uom,omitempty"`
	Href                      string        `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of ReadingType.
type ReadingTypeLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ReadingTypeLink"`
	Href    string   `xml:"href,attr"`
}

// Real electrical energy
type RealEnergy struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 RealEnergy"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint64   `xml:"value"`
}

// Registration represents an authorization to access the resources on a host.
type Registration struct {
	XMLName            xml.Name `xml:"http://ieee.org/2030.5 Registration"`
	DateTimeRegistered int64    `xml:"dateTimeRegistered"`
	PIN                uint     `xml:"pIN"`
	PollRate           uint     `xml:"pollRate,attr,omitempty"`
	Href               string   `xml:"href,attr,omitempty"`
}

func (t *Registration) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Registration
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of Registration.
type RegistrationLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 RegistrationLink"`
	Href    string   `xml:"href,attr"`
}

// The RequestStatus object is used to indicate the current status of a Flow Reservation Request.
type RequestStatus struct {
	XMLName       xml.Name `xml:"http://ieee.org/2030.5 RequestStatus"`
	DateTime      int64    `xml:"dateTime"`
	RequestStatus byte     `xml:"requestStatus"`
}

// A resource is an addressable unit of information, either a collection (List) or instance of an object (identifiedObject, or simply, Resource)
type Resource struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 Resource"`
	Href    string   `xml:"href,attr,omitempty"`
}

// An IdentifiedObject to which a Response can be requested.
type RespondableIdentifiedObject struct {
	XMLName          xml.Name     `xml:"http://ieee.org/2030.5 RespondableIdentifiedObject"`
	MRID             HexBinary128 `xml:"mRID"`
	Description      String32     `xml:"description,omitempty"`
	Version          uint         `xml:"version,omitempty"`
	ReplyTo          string       `xml:"replyTo,attr,omitempty"`
	ResponseRequired HexBinary8   `xml:"responseRequired,attr,omitempty"`
	Href             string       `xml:"href,attr,omitempty"`
}

func (t *RespondableIdentifiedObject) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespondableIdentifiedObject
	var overlay struct {
		*T
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// A Resource to which a Response can be requested.
type RespondableResource struct {
	XMLName          xml.Name   `xml:"http://ieee.org/2030.5 RespondableResource"`
	ReplyTo          string     `xml:"replyTo,attr,omitempty"`
	ResponseRequired HexBinary8 `xml:"responseRequired,attr,omitempty"`
	Href             string     `xml:"href,attr,omitempty"`
}

func (t *RespondableResource) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespondableResource
	var overlay struct {
		*T
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// An IdentifiedObject to which a Response can be requested.
type RespondableSubscribableIdentifiedObject struct {
	XMLName          xml.Name     `xml:"http://ieee.org/2030.5 RespondableSubscribableIdentifiedObject"`
	MRID             HexBinary128 `xml:"mRID"`
	Description      String32     `xml:"description,omitempty"`
	Version          uint         `xml:"version,omitempty"`
	Subscribable     byte         `xml:"subscribable,attr,omitempty"`
	ReplyTo          string       `xml:"replyTo,attr,omitempty"`
	ResponseRequired HexBinary8   `xml:"responseRequired,attr,omitempty"`
	Href             string       `xml:"href,attr,omitempty"`
}

func (t *RespondableSubscribableIdentifiedObject) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespondableSubscribableIdentifiedObject
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// The Response object is the generic response data repository which is extended for specific function sets.
type Response struct {
	XMLName         xml.Name     `xml:"http://ieee.org/2030.5 Response"`
	CreatedDateTime int64        `xml:"createdDateTime,omitempty"`
	EndDeviceLFDI   HexBinary160 `xml:"endDeviceLFDI"`
	Status          byte         `xml:"status,omitempty"`
	Subject         HexBinary128 `xml:"subject"`
	Href            string       `xml:"href,attr,omitempty"`
}

// A List element to hold Response objects.
type ResponseList struct {
	XMLName  xml.Name   `xml:"http://ieee.org/2030.5 ResponseList"`
	Response []Response `xml:"Response,omitempty"`
	All      uint       `xml:"all,attr"`
	Results  byte       `xml:"results,attr"`
	Href     string     `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of Response instances.
type ResponseListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ResponseListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A container for a ResponseList.
type ResponseSet struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 ResponseSet"`
	MRID             HexBinary128     `xml:"mRID"`
	Description      String32         `xml:"description,omitempty"`
	Version          uint             `xml:"version,omitempty"`
	ResponseListLink ResponseListLink `xml:"ResponseListLink,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

// A List element to hold ResponseSet objects.
type ResponseSetList struct {
	XMLName     xml.Name      `xml:"http://ieee.org/2030.5 ResponseSetList"`
	ResponseSet []ResponseSet `xml:"ResponseSet,omitempty"`
	PollRate    uint          `xml:"pollRate,attr,omitempty"`
	All         uint          `xml:"all,attr"`
	Results     byte          `xml:"results,attr"`
	Href        string        `xml:"href,attr,omitempty"`
}

func (t *ResponseSetList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ResponseSetList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of ResponseSet instances.
type ResponseSetListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ResponseSetListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// The EndDevice providing the resources available within the DeviceCapabilities.
type SelfDevice struct {
	XMLName                      xml.Name                     `xml:"http://ieee.org/2030.5 SelfDevice"`
	ConfigurationLink            ConfigurationLink            `xml:"ConfigurationLink,omitempty"`
	DERListLink                  DERListLink                  `xml:"DERListLink,omitempty"`
	DeviceInformationLink        DeviceInformationLink        `xml:"DeviceInformationLink,omitempty"`
	DeviceStatusLink             DeviceStatusLink             `xml:"DeviceStatusLink,omitempty"`
	FileStatusLink               FileStatusLink               `xml:"FileStatusLink,omitempty"`
	IPInterfaceListLink          IPInterfaceListLink          `xml:"IPInterfaceListLink,omitempty"`
	LFDI                         HexBinary160                 `xml:"lFDI,omitempty"`
	LoadShedAvailabilityListLink LoadShedAvailabilityListLink `xml:"LoadShedAvailabilityListLink,omitempty"`
	LoadShedDeviceCategory       HexBinary32                  `xml:"loadShedDeviceCategory,omitempty"`
	LogEventListLink             LogEventListLink             `xml:"LogEventListLink,omitempty"`
	PowerStatusLink              PowerStatusLink              `xml:"PowerStatusLink,omitempty"`
	SFDI                         uint64                       `xml:"sFDI"`
	PollRate                     uint                         `xml:"pollRate,attr,omitempty"`
	Subscribable                 byte                         `xml:"subscribable,attr,omitempty"`
	Href                         string                       `xml:"href,attr,omitempty"`
}

func (t *SelfDevice) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SelfDevice
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to an instance of SelfDevice.
type SelfDeviceLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 SelfDeviceLink"`
	Href    string   `xml:"href,attr"`
}

// Specifies a change to the service status.
type ServiceChange struct {
	XMLName   xml.Name `xml:"http://ieee.org/2030.5 ServiceChange"`
	NewStatus byte     `xml:"newStatus"`
	StartTime int64    `xml:"startTime"`
}

// Organisation that provides services to Customers.
type ServiceSupplier struct {
	XMLName     xml.Name     `xml:"http://ieee.org/2030.5 ServiceSupplier"`
	MRID        HexBinary128 `xml:"mRID"`
	Description String32     `xml:"description,omitempty"`
	Version     uint         `xml:"version,omitempty"`
	Email       String32     `xml:"email,omitempty"`
	Phone       String20     `xml:"phone,omitempty"`
	ProviderID  uint         `xml:"providerID,omitempty"`
	Web         String42     `xml:"web,omitempty"`
	Href        string       `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of ServiceSupplier.
type ServiceSupplierLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 ServiceSupplierLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold ServiceSupplier objects.
type ServiceSupplierList struct {
	XMLName         xml.Name          `xml:"http://ieee.org/2030.5 ServiceSupplierList"`
	ServiceSupplier []ServiceSupplier `xml:"ServiceSupplier,omitempty"`
	All             uint              `xml:"all,attr"`
	Results         byte              `xml:"results,attr"`
	Href            string            `xml:"href,attr,omitempty"`
}

// The SetPoint object is used to apply specific temperature set points to a temperature control device. The values of the heatingSetpoint and coolingSetpoint attributes SHALL be calculated as follows:
// Cooling/Heating Temperature Set Point / 100 = temperature in degrees Celsius where -273.15°C &lt;= temperature &lt;= 327.67°C, corresponding to a Cooling and/or Heating Temperature Set Point. The maximum resolution this format allows is 0.01°C.
// The field not present in a Response indicates that this field has not been used by the end device.
// If a temperature is sent that exceeds the temperature limit boundaries that are programmed into the device, the device SHALL respond by setting the temperature at the limit.
type SetPoint struct {
	XMLName         xml.Name `xml:"http://ieee.org/2030.5 SetPoint"`
	CoolingSetpoint int      `xml:"coolingSetpoint,omitempty"`
	HeatingSetpoint int      `xml:"heatingSetpoint,omitempty"`
}

// Real electrical energy, signed.
type SignedRealEnergy struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 SignedRealEnergy"`
	Multiplier byte     `xml:"multiplier"`
	Value      int64    `xml:"value"`
}

// DER StateOfChargeStatus value: Percent data type
type StateOfChargeStatusType struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 StateOfChargeStatusType"`
	DateTime int64    `xml:"dateTime"`
	Value    uint     `xml:"value"`
}

// DER StorageModeStatus value:
// 0 – storage charging
// 1 – storage discharging
// 2 – storage holding
// All other values reserved.
type StorageModeStatusType struct {
	XMLName  xml.Name `xml:"http://ieee.org/2030.5 StorageModeStatusType"`
	DateTime int64    `xml:"dateTime"`
	Value    byte     `xml:"value"`
}

// May be no more than 16 items long
type String16 string

// May be no more than 192 items long
type String192 string

// May be no more than 20 items long
type String20 string

// May be no more than 32 items long
type String32 string

// May be no more than 42 items long
type String42 string

// May be no more than 6 items long
type String6 string

// An IdentifiedObject to which a Subscription can be requested.
type SubscribableIdentifiedObject struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 SubscribableIdentifiedObject"`
	MRID         HexBinary128 `xml:"mRID"`
	Description  String32     `xml:"description,omitempty"`
	Version      uint         `xml:"version,omitempty"`
	Subscribable byte         `xml:"subscribable,attr,omitempty"`
	Href         string       `xml:"href,attr,omitempty"`
}

func (t *SubscribableIdentifiedObject) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubscribableIdentifiedObject
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// A List to which a Subscription can be requested.
type SubscribableList struct {
	XMLName      xml.Name `xml:"http://ieee.org/2030.5 SubscribableList"`
	All          uint     `xml:"all,attr"`
	Results      byte     `xml:"results,attr"`
	Subscribable byte     `xml:"subscribable,attr,omitempty"`
	Href         string   `xml:"href,attr,omitempty"`
}

func (t *SubscribableList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubscribableList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// A Resource to which a Subscription can be requested.
type SubscribableResource struct {
	XMLName      xml.Name `xml:"http://ieee.org/2030.5 SubscribableResource"`
	Subscribable byte     `xml:"subscribable,attr,omitempty"`
	Href         string   `xml:"href,attr,omitempty"`
}

func (t *SubscribableResource) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubscribableResource
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// Holds the information related to a client subscription to receive updates to a resource automatically.
type Subscription struct {
	XMLName            xml.Name  `xml:"http://ieee.org/2030.5 Subscription"`
	SubscribedResource string    `xml:"subscribedResource"`
	Condition          Condition `xml:"Condition,omitempty"`
	Encoding           byte      `xml:"encoding"`
	Level              String16  `xml:"level"`
	Limit              uint      `xml:"limit"`
	NotificationURI    string    `xml:"notificationURI"`
	Href               string    `xml:"href,attr,omitempty"`
}

// Holds the information related to a client subscription to receive updates to a resource automatically. The actual resources may be passed in the Notification by specifying a specific xsi:type for the Resource and passing the full representation.
type SubscriptionBase struct {
	XMLName            xml.Name `xml:"http://ieee.org/2030.5 SubscriptionBase"`
	SubscribedResource string   `xml:"subscribedResource"`
	Href               string   `xml:"href,attr,omitempty"`
}

// A List element to hold Subscription objects.
type SubscriptionList struct {
	XMLName      xml.Name       `xml:"http://ieee.org/2030.5 SubscriptionList"`
	Subscription []Subscription `xml:"Subscription,omitempty"`
	PollRate     uint           `xml:"pollRate,attr,omitempty"`
	All          uint           `xml:"all,attr"`
	Results      byte           `xml:"results,attr"`
	Href         string         `xml:"href,attr,omitempty"`
}

func (t *SubscriptionList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubscriptionList
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of Subscription instances.
type SubscriptionListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 SubscriptionListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// SupplyInterruptionOverride: There may be periods of time when social, regulatory or other concerns mean that service should not be interrupted, even when available credit has been exhausted. Each Prepayment instance links to a List of SupplyInterruptionOverride instances. Each SupplyInterruptionOverride defines a contiguous period of time during which supply SHALL NOT be interrupted.
type SupplyInterruptionOverride struct {
	XMLName     xml.Name         `xml:"http://ieee.org/2030.5 SupplyInterruptionOverride"`
	Description String32         `xml:"description,omitempty"`
	Interval    DateTimeInterval `xml:"interval"`
	Href        string           `xml:"href,attr,omitempty"`
}

// A List element to hold SupplyInterruptionOverride objects.
type SupplyInterruptionOverrideList struct {
	XMLName                    xml.Name                     `xml:"http://ieee.org/2030.5 SupplyInterruptionOverrideList"`
	SupplyInterruptionOverride []SupplyInterruptionOverride `xml:"SupplyInterruptionOverride,omitempty"`
	All                        uint                         `xml:"all,attr"`
	Results                    byte                         `xml:"results,attr"`
	Href                       string                       `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of SupplyInterruptionOverride instances.
type SupplyInterruptionOverrideListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 SupplyInterruptionOverrideListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Specifies a locale that is supported
type SupportedLocale struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 SupportedLocale"`
	Locale  String42 `xml:"locale"`
	Href    string   `xml:"href,attr,omitempty"`
}

// A List element to hold SupportedLocale objects.
type SupportedLocaleList struct {
	XMLName         xml.Name          `xml:"http://ieee.org/2030.5 SupportedLocaleList"`
	SupportedLocale []SupportedLocale `xml:"SupportedLocale,omitempty"`
	All             uint              `xml:"all,attr"`
	Results         byte              `xml:"results,attr"`
	Href            string            `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of SupportedLocale instances.
type SupportedLocaleListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 SupportedLocaleListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Contains readings that specify a target or goal, such as a consumption target, to which billing incentives or other contractual ramifications may be associated.
type TargetReading struct {
	XMLName                   xml.Name                  `xml:"http://ieee.org/2030.5 TargetReading"`
	MRID                      HexBinary128              `xml:"mRID"`
	Description               String32                  `xml:"description,omitempty"`
	Version                   uint                      `xml:"version,omitempty"`
	BillingReadingSetListLink BillingReadingSetListLink `xml:"BillingReadingSetListLink,omitempty"`
	ReadingTypeLink           ReadingTypeLink           `xml:"ReadingTypeLink,omitempty"`
	Href                      string                    `xml:"href,attr,omitempty"`
}

// A List element to hold TargetReading objects.
type TargetReadingList struct {
	XMLName       xml.Name        `xml:"http://ieee.org/2030.5 TargetReadingList"`
	TargetReading []TargetReading `xml:"TargetReading,omitempty"`
	All           uint            `xml:"all,attr"`
	Results       byte            `xml:"results,attr"`
	Href          string          `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to a List of TargetReading instances.
type TargetReadingListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TargetReadingListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// The TargetReduction object is used by a Demand Response service provider to provide a RECOMMENDED threshold that a device/premises should maintain its consumption below. For example, a service provider can provide a RECOMMENDED threshold of some kWh for a 3-hour event. This means that the device/premises would maintain its consumption below the specified limit for the specified period.
type TargetReduction struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TargetReduction"`
	Type    byte     `xml:"type"`
	Value   uint     `xml:"value"`
}

// A schedule of charges; structure that allows the definition of tariff structures such as step (block) and time of use (tier) when used in conjunction with TimeTariffInterval and ConsumptionTariffInterval.
type TariffProfile struct {
	XMLName                   xml.Name              `xml:"http://ieee.org/2030.5 TariffProfile"`
	MRID                      HexBinary128          `xml:"mRID"`
	Description               String32              `xml:"description,omitempty"`
	Version                   uint                  `xml:"version,omitempty"`
	Currency                  uint                  `xml:"currency,omitempty"`
	PricePowerOfTenMultiplier byte                  `xml:"pricePowerOfTenMultiplier,omitempty"`
	Primacy                   byte                  `xml:"primacy"`
	RateCode                  String20              `xml:"rateCode,omitempty"`
	RateComponentListLink     RateComponentListLink `xml:"RateComponentListLink,omitempty"`
	ServiceCategoryKind       byte                  `xml:"serviceCategoryKind"`
	Href                      string                `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of TariffProfile.
type TariffProfileLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TariffProfileLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold TariffProfile objects.
type TariffProfileList struct {
	XMLName       xml.Name        `xml:"http://ieee.org/2030.5 TariffProfileList"`
	TariffProfile []TariffProfile `xml:"TariffProfile,omitempty"`
	PollRate      uint            `xml:"pollRate,attr,omitempty"`
	All           uint            `xml:"all,attr"`
	Results       byte            `xml:"results,attr"`
	Subscribable  byte            `xml:"subscribable,attr,omitempty"`
	Href          string          `xml:"href,attr,omitempty"`
}

func (t *TariffProfileList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TariffProfileList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of TariffProfile instances.
type TariffProfileListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TariffProfileListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Specification of a temperature.
type Temperature struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 Temperature"`
	Multiplier byte     `xml:"multiplier"`
	Subject    byte     `xml:"subject"`
	Value      int      `xml:"value"`
}

// Text message such as a notification.
type TextMessage struct {
	XMLName          xml.Name         `xml:"http://ieee.org/2030.5 TextMessage"`
	MRID             HexBinary128     `xml:"mRID"`
	Description      String32         `xml:"description,omitempty"`
	Version          uint             `xml:"version,omitempty"`
	CreationTime     int64            `xml:"creationTime"`
	EventStatus      EventStatus      `xml:"EventStatus"`
	Interval         DateTimeInterval `xml:"interval"`
	Originator       String20         `xml:"originator,omitempty"`
	Priority         byte             `xml:"priority"`
	TextMessage      string           `xml:"textMessage"`
	Subscribable     byte             `xml:"subscribable,attr,omitempty"`
	ReplyTo          string           `xml:"replyTo,attr,omitempty"`
	ResponseRequired HexBinary8       `xml:"responseRequired,attr,omitempty"`
	Href             string           `xml:"href,attr,omitempty"`
}

func (t *TextMessage) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TextMessage
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// A List element to hold TextMessage objects.
type TextMessageList struct {
	XMLName      xml.Name      `xml:"http://ieee.org/2030.5 TextMessageList"`
	TextMessage  []TextMessage `xml:"TextMessage,omitempty"`
	All          uint          `xml:"all,attr"`
	Results      byte          `xml:"results,attr"`
	Subscribable byte          `xml:"subscribable,attr,omitempty"`
	Href         string        `xml:"href,attr,omitempty"`
}

func (t *TextMessageList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TextMessageList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of TextMessage instances.
type TextMessageListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TextMessageListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// A response to a text message
type TextResponse struct {
	XMLName         xml.Name     `xml:"http://ieee.org/2030.5 TextResponse"`
	CreatedDateTime int64        `xml:"createdDateTime,omitempty"`
	EndDeviceLFDI   HexBinary160 `xml:"endDeviceLFDI"`
	Status          byte         `xml:"status,omitempty"`
	Subject         HexBinary128 `xml:"subject"`
	Href            string       `xml:"href,attr,omitempty"`
}

// Contains the representation of time, constantly updated.
type Time struct {
	XMLName      xml.Name `xml:"http://ieee.org/2030.5 Time"`
	CurrentTime  int64    `xml:"currentTime"`
	DstEndTime   int64    `xml:"dstEndTime"`
	DstOffset    int      `xml:"dstOffset"`
	DstStartTime int64    `xml:"dstStartTime"`
	LocalTime    int64    `xml:"localTime,omitempty"`
	Quality      byte     `xml:"quality"`
	TzOffset     int      `xml:"tzOffset"`
	PollRate     uint     `xml:"pollRate,attr,omitempty"`
	Href         string   `xml:"href,attr,omitempty"`
}

func (t *Time) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Time
	var overlay struct {
		*T
		PollRate *uint `xml:"pollRate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	return d.DecodeElement(&overlay, &start)
}

// Contains attributes related to the configuration of the time service.
type TimeConfiguration struct {
	XMLName      xml.Name    `xml:"http://ieee.org/2030.5 TimeConfiguration"`
	DstEndRule   HexBinary32 `xml:"dstEndRule"`
	DstOffset    int         `xml:"dstOffset"`
	DstStartRule HexBinary32 `xml:"dstStartRule"`
	TzOffset     int         `xml:"tzOffset"`
}

// SHALL contain a Link to an instance of Time.
type TimeLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TimeLink"`
	Href    string   `xml:"href,attr"`
}

// Describes the time-differentiated portion of the RateComponent, if applicable, and provides the ability to specify multiple time intervals, each with its own consumption-based components and other attributes.
type TimeTariffInterval struct {
	XMLName                           xml.Name                          `xml:"http://ieee.org/2030.5 TimeTariffInterval"`
	MRID                              HexBinary128                      `xml:"mRID"`
	Description                       String32                          `xml:"description,omitempty"`
	Version                           uint                              `xml:"version,omitempty"`
	CreationTime                      int64                             `xml:"creationTime"`
	EventStatus                       EventStatus                       `xml:"EventStatus"`
	Interval                          DateTimeInterval                  `xml:"interval"`
	RandomizeDuration                 int                               `xml:"randomizeDuration,omitempty"`
	RandomizeStart                    int                               `xml:"randomizeStart,omitempty"`
	ConsumptionTariffIntervalListLink ConsumptionTariffIntervalListLink `xml:"ConsumptionTariffIntervalListLink,omitempty"`
	TouTier                           byte                              `xml:"touTier"`
	Subscribable                      byte                              `xml:"subscribable,attr,omitempty"`
	ReplyTo                           string                            `xml:"replyTo,attr,omitempty"`
	ResponseRequired                  HexBinary8                        `xml:"responseRequired,attr,omitempty"`
	Href                              string                            `xml:"href,attr,omitempty"`
}

func (t *TimeTariffInterval) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TimeTariffInterval
	var overlay struct {
		*T
		Subscribable     *byte       `xml:"subscribable,attr,omitempty"`
		ResponseRequired *HexBinary8 `xml:"responseRequired,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	overlay.ResponseRequired = (*HexBinary8)(&overlay.T.ResponseRequired)
	return d.DecodeElement(&overlay, &start)
}

// A List element to hold TimeTariffInterval objects.
type TimeTariffIntervalList struct {
	XMLName            xml.Name             `xml:"http://ieee.org/2030.5 TimeTariffIntervalList"`
	TimeTariffInterval []TimeTariffInterval `xml:"TimeTariffInterval,omitempty"`
	All                uint                 `xml:"all,attr"`
	Results            byte                 `xml:"results,attr"`
	Subscribable       byte                 `xml:"subscribable,attr,omitempty"`
	Href               string               `xml:"href,attr,omitempty"`
}

func (t *TimeTariffIntervalList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TimeTariffIntervalList
	var overlay struct {
		*T
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of TimeTariffInterval instances.
type TimeTariffIntervalListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 TimeTariffIntervalListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Unsigned integer, max inclusive 255 (2^8-1)
type UInt8 byte

// Type for specification of a specific value, with units and power of ten multiplier.
type UnitValueType struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 UnitValueType"`
	Multiplier byte     `xml:"multiplier"`
	Unit       byte     `xml:"unit"`
	Value      int      `xml:"value"`
}

// Abstract type for specifying an unsigned fixed-point value without a given unit of measure.
type UnsignedFixedPointType struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 UnsignedFixedPointType"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint     `xml:"value"`
}

// Logical point on a network at which consumption or production is either physically measured (e.g. metered) or estimated (e.g. unmetered street lights).
type UsagePoint struct {
	XMLName              xml.Name             `xml:"http://ieee.org/2030.5 UsagePoint"`
	MRID                 HexBinary128         `xml:"mRID"`
	Description          String32             `xml:"description,omitempty"`
	Version              uint                 `xml:"version,omitempty"`
	RoleFlags            HexBinary16          `xml:"roleFlags"`
	ServiceCategoryKind  byte                 `xml:"serviceCategoryKind"`
	Status               byte                 `xml:"status"`
	DeviceLFDI           HexBinary160         `xml:"deviceLFDI,omitempty"`
	MeterReadingListLink MeterReadingListLink `xml:"MeterReadingListLink,omitempty"`
	Href                 string               `xml:"href,attr,omitempty"`
}

// Logical point on a network at which consumption or production is either physically measured (e.g. metered) or estimated (e.g. unmetered street lights). A container for associating ReadingType, Readings and ReadingSets.
type UsagePointBase struct {
	XMLName             xml.Name     `xml:"http://ieee.org/2030.5 UsagePointBase"`
	MRID                HexBinary128 `xml:"mRID"`
	Description         String32     `xml:"description,omitempty"`
	Version             uint         `xml:"version,omitempty"`
	RoleFlags           HexBinary16  `xml:"roleFlags"`
	ServiceCategoryKind byte         `xml:"serviceCategoryKind"`
	Status              byte         `xml:"status"`
	Href                string       `xml:"href,attr,omitempty"`
}

// SHALL contain a Link to an instance of UsagePoint.
type UsagePointLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 UsagePointLink"`
	Href    string   `xml:"href,attr"`
}

// A List element to hold UsagePoint objects.
type UsagePointList struct {
	XMLName      xml.Name     `xml:"http://ieee.org/2030.5 UsagePointList"`
	UsagePoint   []UsagePoint `xml:"UsagePoint,omitempty"`
	PollRate     uint         `xml:"pollRate,attr,omitempty"`
	All          uint         `xml:"all,attr"`
	Results      byte         `xml:"results,attr"`
	Subscribable byte         `xml:"subscribable,attr,omitempty"`
	Href         string       `xml:"href,attr,omitempty"`
}

func (t *UsagePointList) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T UsagePointList
	var overlay struct {
		*T
		PollRate     *uint `xml:"pollRate,attr,omitempty"`
		Subscribable *byte `xml:"subscribable,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PollRate = (*uint)(&overlay.T.PollRate)
	overlay.Subscribable = (*byte)(&overlay.T.Subscribable)
	return d.DecodeElement(&overlay, &start)
}

// SHALL contain a Link to a List of UsagePoint instances.
type UsagePointListLink struct {
	XMLName xml.Name `xml:"http://ieee.org/2030.5 UsagePointListLink"`
	All     uint     `xml:"all,attr,omitempty"`
	Href    string   `xml:"href,attr"`
}

// Average electric potential difference between two points.
type VoltageRMS struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 VoltageRMS"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint     `xml:"value"`
}

// Active (real) energy
type WattHour struct {
	XMLName    xml.Name `xml:"http://ieee.org/2030.5 WattHour"`
	Multiplier byte     `xml:"multiplier"`
	Value      uint     `xml:"value"`
}

type xsdHexBinary []byte

func (b *xsdHexBinary) UnmarshalText(text []byte) (err error) {
	*b, err = hex.DecodeString(string(text))
	return
}
func (b xsdHexBinary) MarshalText() ([]byte, error) {
	n := hex.EncodedLen(len(b))
	buf := make([]byte, n)
	hex.Encode(buf, []byte(b))
	return buf, nil
}
