name: Build ot-sim Images
on:
  - push
jobs:
  e2e:
    uses: ./.github/workflows/e2e.yml
  build-qcow:
    name: Build QCOW2 VM Image
    if: github.ref_name == github.event.repository.default_branch
    needs:
      - e2e
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-docker-action@v4
      - uses: oras-project/setup-oras@v1
      - name: Create minimega Overlay
        run: |
          mkdir -p minimega/usr/local/bin
          docker create --name minimega ghcr.io/sandia-minimega/minimega:master
          docker cp minimega:/opt/minimega/bin/miniccc minimega/usr/local/bin/miniccc
      - name: ot-sim Image Build
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            ghcr.io/activeshadow/sceptre-phenix/phenix:main \
            phenix --store.endpoint=bolt:///workspace/store.bdb config create /workspace/config/phenix-image.yml
          docker run --rm --privileged \
            -v ${{ github.workspace }}:/workspace \
            ghcr.io/activeshadow/sceptre-phenix/phenix:main \
            phenix --store.endpoint=bolt:///workspace/store.bdb image build -x -c -o /workspace ot-sim
      - name: Push Image to Registry
        run: |
          oras login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
          oras push "ghcr.io/${{ github.repository }}/ot-sim.qc2:${{ github.ref_name }},${GITHUB_SHA:0:7}" ot-sim.qc2
  build-docker:
    name: Build Architecture-specific Docker Images
    needs:
      - e2e
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - builder: ubuntu-latest
            platform: linux/amd64
          - builder: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Prepare Platform Name
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ot-sim
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          lfs: true
      - name: Build and Push by Digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: prod
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=ghcr.io/${{ github.repository }}/ot-sim,push-by-digest=true,name-canonical=true,push=true
      - name: Export Digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload Digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  merge-docker:
    name: Create Multi-Architecture Docker Image
    needs:
      - build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Download Digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/ot-sim
          tags: |
            type=ref,event=branch
            type=sha,format=short,prefix=,suffix=
      - name: Create Manifest List and Push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository }}/ot-sim@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository }}/ot-sim:${{ steps.meta.outputs.version }}
